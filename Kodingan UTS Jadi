;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F877 is the LDmicro target processor.
	LIST    p=PIC16F877
#include P16F877.inc
	__CONFIG 0x3F72
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_0000af	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; MultiplyRoutine16x16=32 (2x2=4)
l_000008: clrf	 0x2F            	  ; (OP_CLRF, result3)
          clrf	 0x2E            	  ; (OP_CLRF, result2)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x2D            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x2C            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x10             	  ; (OP_MOVLW, 16)
          movwf	 0x36            	  ; (OP_MOVWF, counter)
l_00000f: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_000017	 	  ; (OP_GOTO, dontAdd)
          movf	 0x2A            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x2E            , 1	  ; (OP_ADDWF, result2, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x2F            , 1	  ; (OP_INCF, result3, DEST_F)
          movf	 0x2B            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          addwf	 0x2F            , 1	  ; (OP_ADDWF, result3, DEST_F)
l_000017: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x2F            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x2E            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x2D            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x2C            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x36            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_00000f	 	  ; (OP_GOTO, top)
i_00001e: return	 	 	  ; (OP_RETURN)
    ; MultiplyRoutine24x16=40 (3x2=5)
          clrf	 0x30            	  ; (OP_CLRF, result4)
          clrf	 0x2F            	  ; (OP_CLRF, result3)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x2E            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x2D            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x2C            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x18             	  ; (OP_MOVLW, 24)
          movwf	 0x36            	  ; (OP_MOVWF, counter)
l_000027: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_00002f	 	  ; (OP_GOTO, dontAdd)
          movf	 0x2A            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x2F            , 1	  ; (OP_ADDWF, result3, DEST_F)
          movf	 0x2B            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x2B            , 0	  ; (OP_INCFSZ, multiplicand1, DEST_W)
          addwf	 0x30            , 1	  ; (OP_ADDWF, result4, DEST_F)
l_00002f: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x30            , 1	  ; (OP_RRF, result4, DEST_F)
          rrf	 0x2F            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x2E            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x2D            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x2C            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x36            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_000027	 	  ; (OP_GOTO, top)
i_000037: return	 	 	  ; (OP_RETURN)
    ; DivideRoutine16
l_000038: movf	 0x2B            , 0 	  ; (OP_MOVF, dividend1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, sign)
          btfss	 0x2F            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_000042	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x2E            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x2F            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x2E            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x2F            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_000042: btfss	 0x2B            , 7	  ; (OP_BTFSS, dividend1, 7)
          goto	 l_000049	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x2A            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x2B            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x2A            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x2B            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_000049: clrf	 0x31            	  ; (OP_CLRF, remainder1)
          clrf	 0x30            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x11             	  ; (OP_MOVLW, 16 + 1)
          movwf	 0x36            	  ; (OP_MOVWF, counter)
l_00004e: rlf	 0x2A            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x2B            , 1	  ; (OP_RLF, dividend1, DEST_F)
          decf	 0x36            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_000067	 	  ; (OP_GOTO, done)
          rlf	 0x30            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x31            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x2E            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x30            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x31            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x2F            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x31            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x31            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_000065	 	  ; (OP_GOTO, notNegative)
          movf	 0x2E            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x30            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x31            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x2F            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x31            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_000064: goto	 l_00004e	 	  ; (OP_GOTO, loop)
l_000065: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_000066: goto	 l_00004e	 	  ; (OP_GOTO, loop)
l_000067: btfss	 0x29            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x2A            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x2B            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x2A            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x2B            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_00006e: return	 	 	  ; (OP_RETURN, 0, 0)
    ; DivideRoutine24/16=24
          movf	 0x2C            , 0 	  ; (OP_MOVF, dividend2, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, sign)
i_000072: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000073: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x2F            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_00007b	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x2E            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x2F            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x2E            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x2F            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_00007b: btfss	 0x2C            , 7	  ; (OP_BTFSS, dividend2, 7)
          goto	 l_000085	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x2A            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x2B            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x2C            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x2A            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x2B            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x2C            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_000085: clrf	 0x31            	  ; (OP_CLRF, remainder1)
          clrf	 0x30            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x19             	  ; (OP_MOVLW, 24 + 1)
          movwf	 0x36            	  ; (OP_MOVWF, counter)
l_00008a: rlf	 0x2A            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x2B            , 1	  ; (OP_RLF, dividend1, DEST_F)
          rlf	 0x2C            , 1	  ; (OP_RLF, dividend2, DEST_F)
          decf	 0x36            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_0000a4	 	  ; (OP_GOTO, done)
          rlf	 0x30            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x31            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x2E            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x30            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x31            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x2F            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x31            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x31            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_0000a2	 	  ; (OP_GOTO, notNegative)
          movf	 0x2E            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x30            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x31            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x2F            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x31            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_0000a1: goto	 l_00008a	 	  ; (OP_GOTO, loop)
l_0000a2: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_0000a3: goto	 l_00008a	 	  ; (OP_GOTO, loop)
l_0000a4: btfss	 0x29            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x2A            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x2B            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x2C            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x2A            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x2B            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x2C            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_0000ae: return	 	 	  ; (OP_RETURN, 0, 0)
    ; Program Start
    ; Configure Timer1
l_0000af: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0xF4             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0xF4
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x01             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x1
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_0000c0: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_0000c0	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x87             	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x87
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x9F
          bcf	 0x03            , 5	  ;  BS(0x80,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x08            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x8
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x09            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x9
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xF8             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xF8
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xF8             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xF8
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
          movlw	 0xFE             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFE
          movwf	 0x08            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x88
          movlw	 0x07             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x7
          movwf	 0x09            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x89
l_0000dd: bcf	 0x03            , 5	  ;  BS(0x80,0x0C) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Begin Of PLC Cycle
          btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x28            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x28            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_0000e2: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_0000e2	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; INIT TABLES
    ; INIT VARS
    ; INT_IF_BIT_CLEAR $once_0_INIT_VARS
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_INIT_VARS
          goto	 l_0000f0	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_0_INIT_VARS
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_0_INIT_VARS
    ; INT_SET_VARIABLE_TO_LITERAL Ckp:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Ckp(0x3B):=1(0x1)
          movwf	 0x3B            	  ; (OP_MOVWF, addr + i, 0, comment) ; Ckp(0x3B):=1(0x1)
    ; INT_SET_VARIABLE_TO_LITERAL Ttekan:=0xFA(250)
    ; CopyLitToReg
          movlw	 0xFA             	  ; (OP_MOVLW, lNow, 0, comment) ; Ttekan(0x3C):=250(0xFA)
          movwf	 0x3C            	  ; (OP_MOVWF, addr + i, 0, comment) ; Ttekan(0x3C):=250(0xFA)
          clrf	 0x3D            	  ; (OP_CLRF, addr + i, 0, comment) ; Ttekan(0x3C):=250(0xFA)
    ; INT_SET_VARIABLE_TO_LITERAL Csr:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Csr(0x3E):=1(0x1)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; Csr(0x3E):=1(0x1)
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
l_0000f0: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000f9	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_1_ONE_SHOT_RISING_
          btfss	 0x20            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_1_ONE_SHOT_RISING_
          goto	 l_0000f7	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_0000f6: goto	 l_0000f8	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_1_ONE_SHOT_RISING_
l_0000f7: bsf	 0x20            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_1_ONE_SHOT_RISING_
l_0000f8: goto	 l_0000fa	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_1_ONE_SHOT_RISING_
l_0000f9: bcf	 0x20            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_1_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_0000fa: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000fe	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL Cdigit:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Cdigit(0x3F):=1(0x1)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; Cdigit(0x3F):=1(0x1)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_0000fe: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000102	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL Csr:=0x11(17)
    ; CopyLitToReg
          movlw	 0x11             	  ; (OP_MOVLW, lNow, 0, comment) ; Csr(0x3E):=17(0x11)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; Csr(0x3E):=17(0x11)
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
l_000102: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_GOSUB reset
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_00010a	 	  ; (OP_GOTO, condFalse)
i_000108: bsf	 0x0A            , 3	  ;  PS(0x00,0x0E) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
    ; INT_GOSUB Rung19 // reset 0
          call	 l_000eb5	 	  ; (OP_CALL, l->FwdAddr)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
l_00010a: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_00010b: bcf	 0x0A            , 3	  ;  PS(0x18,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00010c: bcf	 0x0A            , 4	  ;  PS(0x18,0x01) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_TCY Tkp 25000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000137	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Tkp 25
    ; CopyRegToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Tkp
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x19             	  ; (OP_MOVLW, lNow, 0, comment) ; 25
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 25
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000121	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000121	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000121: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000126	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000125: goto	 l_000128	 	  ; (OP_GOTO, isEnd)
l_000126: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000128: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00012b	 	  ; (OP_GOTO, ifThen)
i_00012a: goto	 l_00012d	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE Tkp overlap to  overflow to 
l_00012b: incf	 0x40            , 1	  ; (OP_INCF, addr, DEST_F, name) ; Tkp
i_00012c: goto	 l_000133	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Tkp:=0x0(0)
    ; CopyLitToReg
l_00012d: clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; Tkp(0x40):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_2_TCY_Tkp
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_2_TCY_Tkp
          goto	 l_000132	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_2_TCY_Tkp
          bsf	 0x20            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_2_TCY_Tkp
i_000131: goto	 l_000133	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_2_TCY_Tkp
l_000132: bcf	 0x20            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_2_TCY_Tkp
    ; INT_IF_BIT_CLEAR $once_2_TCY_Tkp
l_000133: btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_2_TCY_Tkp
          goto	 l_000136	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_000136: goto	 l_000138	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Tkp:=0x0(0)
    ; CopyLitToReg
l_000137: clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; Tkp(0x40):=0(0x0)
    ; ELEM_CTC
    ; INT_IF_BIT_SET $rung_top
l_000138: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00015d	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; INT_IF_BIT_CLEAR $once_3_CTC_Ckp
          btfsc	 0x20            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_3_CTC_Ckp
          goto	 l_00015c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_3_CTC_Ckp
          bsf	 0x20            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_3_CTC_Ckp
    ; INT_INCREMENT_VARIABLE Ckp overlap to  overflow to 
          incf	 0x3B            , 1	  ; (OP_INCF, addr, DEST_F, name) ; Ckp
    ; INT_IF_GRT Ckp 3
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3B            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3B            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00014f	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3B            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00014f	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00014f: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000154	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000153: goto	 l_000156	 	  ; (OP_GOTO, isEnd)
l_000154: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000156: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000159	 	  ; (OP_GOTO, ifThen)
i_000158: goto	 l_00015c	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Ckp:=0x1(1)
    ; CopyLitToReg
l_000159: movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Ckp(0x3B):=1(0x1)
          movwf	 0x3B            	  ; (OP_MOVWF, addr + i, 0, comment) ; Ckp(0x3B):=1(0x1)
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
l_00015c: goto	 l_00015e	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_3_CTC_Ckp
l_00015d: bcf	 0x20            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_3_CTC_Ckp
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
l_00015e: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_00016d	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          movf	 0x3B            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00016c	 	  ; (OP_GOTO, ifThen)
i_00016b: goto	 l_00016d	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1
l_00016c: bcf	 0x20            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yk1:=$parThis_1
l_00016d: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 6	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x05            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x05            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_000182	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          movf	 0x3B            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000181	 	  ; (OP_GOTO, ifThen)
i_000180: goto	 l_000182	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1
l_000181: bcf	 0x20            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yk2:=$parThis_1
l_000182: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 6	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x05            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x05            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_000197	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          movf	 0x3B            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000196	 	  ; (OP_GOTO, ifThen)
i_000195: goto	 l_000197	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1
l_000196: bcf	 0x20            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yk3:=$parThis_1
l_000197: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 6	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x05            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x05            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 4 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Yk1
          btfsc	 0x05            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Yk1
          goto	 l_0001a2	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
l_0001a2: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XA
          btfsc	 0x05            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XA
          goto	 l_0001a9	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_2
          bcf	 0x20            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_2
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_2
l_0001a9: btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_2
          goto	 l_0001ae	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=1(0x1)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=1(0x1)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=1(0x1)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
l_0001ae: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XB
          btfsc	 0x05            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XB
          goto	 l_0001b5	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_2
          bcf	 0x20            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_2
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_2
l_0001b5: btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_2
          goto	 l_0001ba	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x4(4)
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=4(0x4)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=4(0x4)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=4(0x4)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
l_0001ba: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XC
          btfsc	 0x05            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XC
          goto	 l_0001c1	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_2
          bcf	 0x20            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_2
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_2
l_0001c1: btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_2
          goto	 l_0001c6	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x7(7)
    ; CopyLitToReg
          movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=7(0x7)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=7(0x7)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=7(0x7)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
l_0001c6: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XD
          btfsc	 0x09            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XD
          goto	 l_0001cd	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_2
          bcf	 0x20            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_2
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_2
l_0001cd: btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_2
          goto	 l_0001d2	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=10(0xA)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=10(0xA)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=10(0xA)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 5 =======
    ; INT_SET_BIT $rung_top
l_0001d2: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Yk2
          btfsc	 0x05            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Yk2
          goto	 l_0001d6	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_0001d6: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XA
          btfsc	 0x05            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XA
          goto	 l_0001dd	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_3
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_3
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_3
l_0001dd: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_0001e2	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x2(2)
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=2(0x2)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=2(0x2)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=2(0x2)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_0001e2: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XB
          btfsc	 0x05            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XB
          goto	 l_0001e9	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_3
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_3
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_3
l_0001e9: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_0001ee	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x5(5)
    ; CopyLitToReg
          movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=5(0x5)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=5(0x5)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=5(0x5)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_0001ee: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XC
          btfsc	 0x05            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XC
          goto	 l_0001f5	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_3
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_3
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_3
l_0001f5: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_0001fa	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x8(8)
    ; CopyLitToReg
          movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=8(0x8)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=8(0x8)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=8(0x8)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_0001fa: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XD
          btfsc	 0x09            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XD
          goto	 l_000201	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_3
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_3
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_3
l_000201: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_000205	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x0(0)
    ; CopyLitToReg
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=0(0x0)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=0(0x0)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 6 =======
    ; INT_SET_BIT $rung_top
l_000205: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Yk3
          btfsc	 0x05            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Yk3
          goto	 l_000209	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_000209: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XA
          btfsc	 0x05            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XA
          goto	 l_000210	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_4
          bcf	 0x21            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_4
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_4
l_000210: btfss	 0x21            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_000215	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x3(3)
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=3(0x3)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=3(0x3)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=3(0x3)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_000215: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XB
          btfsc	 0x05            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XB
          goto	 l_00021c	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_4
          bcf	 0x21            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_4
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_4
l_00021c: btfss	 0x21            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_000221	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x6(6)
    ; CopyLitToReg
          movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=6(0x6)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=6(0x6)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=6(0x6)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_000221: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XC
          btfsc	 0x05            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XC
          goto	 l_000228	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_4
          bcf	 0x21            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_4
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_4
l_000228: btfss	 0x21            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_00022d	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0x9(9)
    ; CopyLitToReg
          movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=9(0x9)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=9(0x9)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=9(0x9)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_00022d: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XD
          btfsc	 0x09            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XD
          goto	 l_000234	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_4
          bcf	 0x21            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_4
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_4
l_000234: btfss	 0x21            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_000239	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL kp:=0xB(11)
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; kp(0x41):=11(0xB)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; kp(0x41):=11(0xB)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; kp(0x41):=11(0xB)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 7 =======
    ; INT_SET_BIT $rung_top
l_000239: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_0
          bcf	 0x21            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_5:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XA
          btfsc	 0x05            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XA
          goto	 l_000242	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_5
          bcf	 0x21            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; INT_IF_BIT_SET $parThis_5
l_000242: btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_000245	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_5:=$rung_top
l_000245: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XB
          btfsc	 0x05            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XB
          goto	 l_00024c	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_5
          bcf	 0x21            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; INT_IF_BIT_SET $parThis_5
l_00024c: btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_00024f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_5:=$rung_top
l_00024f: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XC
          btfsc	 0x05            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XC
          goto	 l_000256	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_5
          bcf	 0x21            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; INT_IF_BIT_SET $parThis_5
l_000256: btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_000259	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_5:=$rung_top
l_000259: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR XD
          btfsc	 0x09            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; XD
          goto	 l_000260	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_5
          bcf	 0x21            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; INT_IF_BIT_SET $parThis_5
l_000260: btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_000263	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_0
l_000263: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x21            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ELEM_TOF
    ; INT_IF_BIT_CLEAR $rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000291	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Ttekan 250
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Ttekan
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Ttekan
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xFA             	  ; (OP_MOVLW, lNow, 0, comment) ; 250
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 250
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 250
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x2F            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x2F            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000282	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000282	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000282: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000287	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000286: goto	 l_000289	 	  ; (OP_GOTO, isEnd)
l_000287: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000289: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00028c	 	  ; (OP_GOTO, ifThen)
i_00028b: goto	 l_000290	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE Ttekan overlap to  overflow to 
l_00028c: incf	 0x3C            , 1	  ; (OP_INCF, addr, DEST_F, name) ; Ttekan
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x3D            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; Ttekan
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
l_000290: goto	 l_000293	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Ttekan:=0x0(0)
    ; CopyLitToReg
l_000291: clrf	 0x3C            	  ; (OP_CLRF, addr + i, 0, comment) ; Ttekan(0x3C):=0(0x0)
          clrf	 0x3D            	  ; (OP_CLRF, addr + i, 0, comment) ; Ttekan(0x3C):=0(0x0)
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_6:=$rung_top
l_000293: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Rtekan:=$parThis_6
          btfsc	 0x21            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x21            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_6:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_6
          btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_6
          goto	 l_0002a7	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_4_ONE_SHOT_RISING_
          btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_4_ONE_SHOT_RISING_
          goto	 l_0002a5	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_6
          bcf	 0x21            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_6
i_0002a4: goto	 l_0002a6	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_4_ONE_SHOT_RISING_
l_0002a5: bsf	 0x21            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_4_ONE_SHOT_RISING_
l_0002a6: goto	 l_0002a8	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_4_ONE_SHOT_RISING_
l_0002a7: bcf	 0x21            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_4_ONE_SHOT_RISING_
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_6
l_0002a8: btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_6
          goto	 l_0002ac	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL Cdigit:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Cdigit(0x3F):=1(0x1)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; Cdigit(0x3F):=1(0x1)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 8 =======
    ; INT_SET_BIT $rung_top
l_0002ac: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Rtekan
          btfsc	 0x21            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Rtekan
          goto	 l_0002b0	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_CONTACTS
    ; INT_IF_BIT_SET Rmulai
l_0002b0: btfss	 0x21            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; Rmulai
          goto	 l_0002b3	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $rung_top
l_0002b3: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0002d5	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT kp 9
    ; CopyLitToReg
          movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; 9
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 9
          clrf	 0x2B            	  ; (OP_CLRF, addr + i, 0, comment) ; 9
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x42            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x41            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x42            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x42            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002ca	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x42            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002ca	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002ca: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0002cf	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0002ce: goto	 l_0002d1	 	  ; (OP_GOTO, isEnd)
l_0002cf: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0002d1: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002d4	 	  ; (OP_GOTO, ifThen)
i_0002d3: goto	 l_0002d5	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0002d4: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $rung_top
l_0002d5: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0002f7	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT jmltekan 2
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          clrf	 0x2B            	  ; (OP_CLRF, addr + i, 0, comment) ; 2
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x44            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x43            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x44            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x44            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002ec	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x44            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002ec	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002ec: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0002f1	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0002f0: goto	 l_0002f3	 	  ; (OP_GOTO, isEnd)
l_0002f1: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0002f3: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002f6	 	  ; (OP_GOTO, ifThen)
i_0002f5: goto	 l_0002f7	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0002f6: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $rung_top
l_0002f7: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0002ff	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_5_ONE_SHOT_RISING_
          btfss	 0x22            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_5_ONE_SHOT_RISING_
          goto	 l_0002fd	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_0002fc: goto	 l_0002fe	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_5_ONE_SHOT_RISING_
l_0002fd: bsf	 0x22            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_5_ONE_SHOT_RISING_
l_0002fe: goto	 l_000300	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_5_ONE_SHOT_RISING_
l_0002ff: bcf	 0x22            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_5_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_ADD
    ; INT_IF_BIT_SET $rung_top
l_000300: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000310	 	  ; (OP_GOTO, condFalse)
    ; INT_INCREMENT_VARIABLE jmltekan overlap to $overlap overflow to ROverflowFlagV
          movf	 0x44            , 0 	  ; (OP_MOVF, addr + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          incf	 0x43            , 1	  ; (OP_INCF, addr, DEST_F, name) ; jmltekan
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x44            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; jmltekan
          btfsc	 0x03            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x28            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x28            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000310	 	  ; (OP_GOTO, notOverflow)
          btfss	 0x44            , 7	  ; (OP_BTFSS, addr + sov - 1, 7)
          goto	 l_000310	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 6	  ; (OP_BSF, addrO, bitO)
    ; INT_COPY_BIT_TO_BIT $parThis_7:=$rung_top
l_000310: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_7
          btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_7
          goto	 l_000323	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          movf	 0x43            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000322	 	  ; (OP_GOTO, ifThen)
          movf	 0x44            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000322	 	  ; (OP_GOTO, ifThen)
i_000321: goto	 l_000323	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_7
l_000322: bcf	 0x22            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_7
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_7
l_000323: btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_7
          goto	 l_000329	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE digit1 := kp
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; kp
          movwf	 0x45            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit1
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; kp
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit1
    ; INT_COPY_BIT_TO_BIT $parThis_8:=$parThis_7
l_000329: btfsc	 0x22            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x22            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_8
          btfss	 0x22            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_8
          goto	 l_00033b	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          clrf	 0x2E            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          movf	 0x41            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00033a	 	  ; (OP_GOTO, ifThen)
          movf	 0x42            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00033a	 	  ; (OP_GOTO, ifThen)
i_000339: goto	 l_00033b	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_8
l_00033a: bcf	 0x22            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_8
    ; ELEM_GOSUB reset
    ; INT_IF_BIT_SET $parThis_8
l_00033b: btfss	 0x22            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_8
          goto	 l_00033f	 	  ; (OP_GOTO, condFalse)
i_00033d: bsf	 0x0A            , 3	  ;  PS(0x03,0x0E) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
    ; INT_GOSUB Rung19 // reset 0
          call	 l_000eb5	 	  ; (OP_CALL, l->FwdAddr)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_7:=$rung_top
l_00033f: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
i_000343: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000344: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_7
          btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_7
          goto	 l_00036b	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES jmltekan 2
    ; CopyRegToReg
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; jmltekan
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x44            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; jmltekan
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 2
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x2F            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x2F            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000360	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000360	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000360: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000365	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000364: goto	 l_000367	 	  ; (OP_GOTO, isEnd)
l_000365: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000367: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00036a	 	  ; (OP_GOTO, ifThen)
i_000369: goto	 l_00036b	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_7
l_00036a: bcf	 0x22            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_7
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_7
l_00036b: btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_7
          goto	 l_000371	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE digit0 := kp
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; kp
          movwf	 0x47            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit0
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; kp
          movwf	 0x48            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit0
    ; ELEM_SHIFT_REGISTER
    ; INT_IF_BIT_SET $parThis_7
l_000371: btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_7
          goto	 l_000385	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_6_SHIFT_REGISTER_digit
          btfsc	 0x22            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_6_SHIFT_REGISTER_digit
          goto	 l_000385	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE digit4 := digit3
    ; CopyRegToReg
          movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit3
          movwf	 0x49            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit4
          movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit3
          movwf	 0x4A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit4
    ; INT_SET_VARIABLE_TO_VARIABLE digit3 := digit2
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x4B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit3
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x4C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit3
    ; INT_SET_VARIABLE_TO_VARIABLE digit2 := digit1
    ; CopyRegToReg
          movf	 0x45            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x4D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit2
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit2
    ; INT_SET_VARIABLE_TO_VARIABLE digit1 := digit0
    ; CopyRegToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit0
          movwf	 0x45            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit1
          movf	 0x48            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit0
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit1
    ; INT_COPY_BIT_TO_BIT $once_6_SHIFT_REGISTER_digit:=$parThis_7
l_000385: btfsc	 0x22            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x22            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 9 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Rtekan
          btfsc	 0x21            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Rtekan
          goto	 l_00038d	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_9:=$rung_top
l_00038d: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_SET Rmulai
          btfss	 0x21            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; Rmulai
          goto	 l_000394	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_9
          bcf	 0x22            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_9
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_9
l_000394: btfss	 0x22            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_9
          goto	 l_0003a3	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; 10
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 10
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 10
          movf	 0x41            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003a2	 	  ; (OP_GOTO, ifThen)
          movf	 0x42            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003a2	 	  ; (OP_GOTO, ifThen)
i_0003a1: goto	 l_0003a3	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_9
l_0003a2: bcf	 0x22            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_9
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_9
l_0003a3: btfss	 0x22            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_9
          goto	 l_0003ab	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_7_ONE_SHOT_RISING_
          btfss	 0x22            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_7_ONE_SHOT_RISING_
          goto	 l_0003a9	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_9
          bcf	 0x22            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_9
i_0003a8: goto	 l_0003aa	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_7_ONE_SHOT_RISING_
l_0003a9: bsf	 0x22            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_7_ONE_SHOT_RISING_
l_0003aa: goto	 l_0003ac	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_7_ONE_SHOT_RISING_
l_0003ab: bcf	 0x22            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_7_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_9
l_0003ac: btfss	 0x22            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_9
          goto	 l_0003b2	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE bilangan2 := bilangan
    ; CopyRegToReg
          movf	 0x51            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan
          movwf	 0x4F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; bilangan2
          movf	 0x52            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan
          movwf	 0x50            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; bilangan2
    ; INT_COPY_BIT_TO_BIT $parThis_a:=$parThis_9
l_0003b2: btfsc	 0x22            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x22            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_a
          btfss	 0x22            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_a
          goto	 l_0003b9	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT Rmulai
          bsf	 0x21            , 7	  ; (OP_BSF, addr1, bit1, a->name1) ; Rmulai
    ; ] finish parallel
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_9:=$rung_top
l_0003b9: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_9
          btfss	 0x22            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_9
          goto	 l_0003cc	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; 11
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 11
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 11
          movf	 0x41            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003cb	 	  ; (OP_GOTO, ifThen)
          movf	 0x42            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003cb	 	  ; (OP_GOTO, ifThen)
i_0003ca: goto	 l_0003cc	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_9
l_0003cb: bcf	 0x22            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_9
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_9
l_0003cc: btfss	 0x22            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_9
          goto	 l_0003d4	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_8_ONE_SHOT_RISING_
          btfss	 0x22            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_8_ONE_SHOT_RISING_
          goto	 l_0003d2	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_9
          bcf	 0x22            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_9
i_0003d1: goto	 l_0003d3	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_8_ONE_SHOT_RISING_
l_0003d2: bsf	 0x22            , 7	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_8_ONE_SHOT_RISING_
l_0003d3: goto	 l_0003d5	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_8_ONE_SHOT_RISING_
l_0003d4: bcf	 0x22            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_8_ONE_SHOT_RISING_
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_9
l_0003d5: btfss	 0x22            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_9
          goto	 l_0003fb	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES jmltekan 1
    ; CopyRegToReg
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; jmltekan
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x44            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; jmltekan
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x2F            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x2F            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0003f0	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0003f0	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0003f0: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0003f5	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0003f4: goto	 l_0003f7	 	  ; (OP_GOTO, isEnd)
l_0003f5: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0003f7: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0003fa	 	  ; (OP_GOTO, ifThen)
i_0003f9: goto	 l_0003fb	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_9
l_0003fa: bcf	 0x22            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_9
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_b:=$parThis_9
l_0003fb: btfsc	 0x22            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x23            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x22            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x23            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_SET Rmulai
          btfss	 0x21            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; Rmulai
          goto	 l_000402	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_b
          bcf	 0x23            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_b
    ; ELEM_GOSUB bspace
    ; INT_IF_BIT_SET $parThis_b
l_000402: btfss	 0x23            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_b
          goto	 l_000406	 	  ; (OP_GOTO, condFalse)
i_000404: bsf	 0x0A            , 3	  ;  PS(0x03,0x0E) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
    ; INT_GOSUB Rung22 // bspace 0
          call	 l_000ed8	 	  ; (OP_CALL, l->FwdAddr)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_b:=$parThis_9
l_000406: btfsc	 0x22            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x23            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x22            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x23            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
i_00040a: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00040b: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Rmulai
          btfsc	 0x21            , 7	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Rmulai
          goto	 l_00040f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_b
          bcf	 0x23            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_b
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_c:=$parThis_b
l_00040f: btfsc	 0x23            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x23            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x23            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x23            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_c
          btfss	 0x23            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_c
          goto	 l_000416	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Rmulai
          bcf	 0x21            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; Rmulai
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_b
l_000416: btfss	 0x23            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_b
          goto	 l_00041a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL CD1:=0x0(0)
    ; CopyLitToReg
          clrf	 0x53            	  ; (OP_CLRF, addr + i, 0, comment) ; CD1(0x53):=0(0x0)
          clrf	 0x54            	  ; (OP_CLRF, addr + i, 0, comment) ; CD1(0x53):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_b
l_00041a: btfss	 0x23            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_b
          goto	 l_000420	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE bilangan := bilangan2
    ; CopyRegToReg
          movf	 0x4F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan2
          movwf	 0x51            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; bilangan
          movf	 0x50            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan2
          movwf	 0x52            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; bilangan
    ; ] finish parallel
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 10 =======
    ; INT_SET_BIT $rung_top
l_000420: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_d:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x23            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x23            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_d
          btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_000433	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          clrf	 0x2E            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          movf	 0x43            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000432	 	  ; (OP_GOTO, ifThen)
          movf	 0x44            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000432	 	  ; (OP_GOTO, ifThen)
i_000431: goto	 l_000433	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_d
l_000432: bcf	 0x23            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_d
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_d
l_000433: btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_00043b	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_9_ONE_SHOT_RISING_
          btfss	 0x23            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_9_ONE_SHOT_RISING_
          goto	 l_000439	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_d
          bcf	 0x23            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_d
i_000438: goto	 l_00043a	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_9_ONE_SHOT_RISING_
l_000439: bsf	 0x23            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_9_ONE_SHOT_RISING_
l_00043a: goto	 l_00043c	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_9_ONE_SHOT_RISING_
l_00043b: bcf	 0x23            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_9_ONE_SHOT_RISING_
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_d
l_00043c: btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_000440	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL bilangan:=0x0(0)
    ; CopyLitToReg
          clrf	 0x51            	  ; (OP_CLRF, addr + i, 0, comment) ; bilangan(0x51):=0(0x0)
          clrf	 0x52            	  ; (OP_CLRF, addr + i, 0, comment) ; bilangan(0x51):=0(0x0)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_d:=$rung_top
l_000440: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x23            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x23            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_d
          btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_000453	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          movf	 0x43            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000452	 	  ; (OP_GOTO, ifThen)
          movf	 0x44            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000452	 	  ; (OP_GOTO, ifThen)
i_000451: goto	 l_000453	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_d
l_000452: bcf	 0x23            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_d
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_d
l_000453: btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_00045b	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_a_ONE_SHOT_RISING_
          btfss	 0x23            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_a_ONE_SHOT_RISING_
          goto	 l_000459	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_d
          bcf	 0x23            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_d
i_000458: goto	 l_00045a	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_a_ONE_SHOT_RISING_
l_000459: bsf	 0x23            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_a_ONE_SHOT_RISING_
l_00045a: goto	 l_00045c	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_a_ONE_SHOT_RISING_
l_00045b: bcf	 0x23            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_a_ONE_SHOT_RISING_
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_d
l_00045c: btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_000462	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE bilangan := digit1
    ; CopyRegToReg
          movf	 0x45            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x51            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; bilangan
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x52            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; bilangan
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_d:=$rung_top
l_000462: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x23            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x23            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_d
          btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_000475	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 2
          movf	 0x43            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000474	 	  ; (OP_GOTO, ifThen)
          movf	 0x44            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000474	 	  ; (OP_GOTO, ifThen)
i_000473: goto	 l_000475	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_d
l_000474: bcf	 0x23            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_d
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_d
l_000475: btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_00047d	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_b_ONE_SHOT_RISING_
          btfss	 0x23            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_b_ONE_SHOT_RISING_
          goto	 l_00047b	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_d
          bcf	 0x23            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_d
i_00047a: goto	 l_00047c	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_b_ONE_SHOT_RISING_
l_00047b: bsf	 0x23            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_b_ONE_SHOT_RISING_
l_00047c: goto	 l_00047e	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_b_ONE_SHOT_RISING_
l_00047d: bcf	 0x23            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_b_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_MUL
    ; INT_IF_BIT_SET $parThis_d
l_00047e: btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_000490	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x55):=10(0xA)
          movwf	 0x55            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x55):=10(0xA)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x55):=10(0xA)
    ; INT_SET_VARIABLE_MULTIPLY puluhan := digit2 * $scratch2
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x2C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x2D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x2C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x57            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; puluhan
          movf	 0x2D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x58            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; puluhan
l_000490: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000491: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_MUL
    ; INT_IF_BIT_SET $parThis_d
          btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_0004a4	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x55):=1(0x1)
          movwf	 0x55            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x55):=1(0x1)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x55):=1(0x1)
    ; INT_SET_VARIABLE_MULTIPLY satuan := digit1 * $scratch2
    ; CopyRegToReg
          movf	 0x45            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x2C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x2D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x2C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x59            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; satuan
          movf	 0x2D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x5A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; satuan
l_0004a4: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0004a5: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_ADD
    ; INT_IF_BIT_SET $parThis_d
          btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_0004bd	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_ADD bilangan := puluhan + satuan; '$overlap'; 'ROverflowFlagV'
    ; CopyRegToReg
          movf	 0x57            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; puluhan
          movwf	 0x51            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x58            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; puluhan
          movwf	 0x52            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; add
          movf	 0x52            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x5A            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          movf	 0x59            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x51            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x5A            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x5A            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x52            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0004bd	 	  ; (OP_GOTO, notOverflow)
          movf	 0x52            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x5A            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0004bd	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; CopyRegToReg
    ; ] finish parallel
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_d:=$rung_top
l_0004bd: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x23            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x23            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_d
          btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_0004d0	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 3
          movf	 0x43            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004cf	 	  ; (OP_GOTO, ifThen)
          movf	 0x44            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004cf	 	  ; (OP_GOTO, ifThen)
i_0004ce: goto	 l_0004d0	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_d
l_0004cf: bcf	 0x23            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_d
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_d
l_0004d0: btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_0004d8	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_c_ONE_SHOT_RISING_
          btfss	 0x23            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_c_ONE_SHOT_RISING_
          goto	 l_0004d6	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_d
          bcf	 0x23            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_d
i_0004d5: goto	 l_0004d7	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_c_ONE_SHOT_RISING_
l_0004d6: bsf	 0x23            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_c_ONE_SHOT_RISING_
l_0004d7: goto	 l_0004d9	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_c_ONE_SHOT_RISING_
l_0004d8: bcf	 0x23            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_c_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_MUL
    ; INT_IF_BIT_SET $parThis_d
l_0004d9: btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_0004eb	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0x64(100)
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x55):=100(0x64)
          movwf	 0x55            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x55):=100(0x64)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x55):=100(0x64)
    ; INT_SET_VARIABLE_MULTIPLY ratusan := digit3 * $scratch2
    ; CopyRegToReg
          movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit3
          movwf	 0x2C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit3
          movwf	 0x2D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x2C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x5B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ratusan
          movf	 0x2D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x5C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ratusan
l_0004eb: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0004ec: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_MUL
    ; INT_IF_BIT_SET $parThis_d
          btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_0004ff	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x55):=10(0xA)
          movwf	 0x55            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x55):=10(0xA)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x55):=10(0xA)
    ; INT_SET_VARIABLE_MULTIPLY puluhan := digit2 * $scratch2
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x2C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x2D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x2C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x57            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; puluhan
          movf	 0x2D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x58            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; puluhan
l_0004ff: bcf	 0x0A            , 3	  ;  PS(0x18,0x05) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000500: bcf	 0x0A            , 4	  ;  PS(0x18,0x05) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_MUL
    ; INT_IF_BIT_SET $parThis_d
          btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_000513	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x55):=1(0x1)
          movwf	 0x55            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x55):=1(0x1)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x55):=1(0x1)
    ; INT_SET_VARIABLE_MULTIPLY satuan := digit1 * $scratch2
    ; CopyRegToReg
          movf	 0x45            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x2C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x2D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x2C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x59            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; satuan
          movf	 0x2D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x5A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; satuan
l_000513: bcf	 0x0A            , 3	  ;  PS(0x18,0x05) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000514: bcf	 0x0A            , 4	  ;  PS(0x18,0x05) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_ADD
    ; INT_IF_BIT_SET $parThis_d
          btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_00052c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_ADD bilangan := ratusan + puluhan; '$overlap'; 'ROverflowFlagV'
    ; CopyRegToReg
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratusan
          movwf	 0x51            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratusan
          movwf	 0x52            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; add
          movf	 0x52            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x58            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          movf	 0x57            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x51            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x58            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x58            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x52            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00052c	 	  ; (OP_GOTO, notOverflow)
          movf	 0x52            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x58            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00052c	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; CopyRegToReg
    ; ELEM_ADD
    ; INT_IF_BIT_SET $parThis_d
l_00052c: btfss	 0x23            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_d
          goto	 l_00053f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_ADD bilangan := bilangan + satuan; '$overlap'; 'ROverflowFlagV'
    ; add
          movf	 0x52            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x5A            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          movf	 0x59            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x51            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x5A            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x5A            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x52            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00053f	 	  ; (OP_GOTO, notOverflow)
          movf	 0x52            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x5A            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00053f	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; CopyRegToReg
    ; ] finish parallel
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 11 =======
    ; INT_SET_BIT $rung_top
l_00053f: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Rmulai
          btfsc	 0x21            , 7	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Rmulai
          goto	 l_000543	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_e:=$rung_top
l_000543: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x23            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x23            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GRT
    ; INT_IF_BIT_SET $parThis_e
          btfss	 0x23            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_e
          goto	 l_000568	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LEQ bilangan 0
    ; CopyLitToReg
          clrf	 0x2A            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x2B            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x52            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x51            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x52            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x52            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00055d	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x52            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00055d	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00055d: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000562	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000561: goto	 l_000564	 	  ; (OP_GOTO, isEnd)
l_000562: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000564: btfss	 0x28            , 4	  ; (OP_BTFSS, addrO, bitO)
          goto	 l_000567	 	  ; (OP_GOTO, ifThen)
i_000566: goto	 l_000568	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_e
l_000567: bcf	 0x23            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_e
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_e
l_000568: btfss	 0x23            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_e
          goto	 l_000570	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_d_ONE_SHOT_RISING_
          btfss	 0x24            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_d_ONE_SHOT_RISING_
          goto	 l_00056e	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_e
          bcf	 0x23            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_e
i_00056d: goto	 l_00056f	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_d_ONE_SHOT_RISING_
l_00056e: bsf	 0x24            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_d_ONE_SHOT_RISING_
l_00056f: goto	 l_000571	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_d_ONE_SHOT_RISING_
l_000570: bcf	 0x24            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_d_ONE_SHOT_RISING_
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_e
l_000571: btfss	 0x23            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_e
          goto	 l_000576	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL CD1:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; CD1(0x53):=1(0x1)
          movwf	 0x53            	  ; (OP_MOVWF, addr + i, 0, comment) ; CD1(0x53):=1(0x1)
          clrf	 0x54            	  ; (OP_CLRF, addr + i, 0, comment) ; CD1(0x53):=1(0x1)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_e:=$rung_top
l_000576: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x23            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x23            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_e
          btfss	 0x23            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_e
          goto	 l_000588	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          clrf	 0x2E            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          movf	 0x51            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000587	 	  ; (OP_GOTO, ifThen)
          movf	 0x52            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000587	 	  ; (OP_GOTO, ifThen)
i_000586: goto	 l_000588	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_e
l_000587: bcf	 0x23            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_e
    ; ELEM_TON Tselesai 1000000
    ; INT_IF_BIT_SET $parThis_e
l_000588: btfss	 0x23            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_e
          goto	 l_0005b3	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Tselesai 1000
    ; CopyRegToReg
          movf	 0x5D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Tselesai
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Tselesai
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xE8             	  ; (OP_MOVLW, lNow, 0, comment) ; 1000
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1000
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 1000
          movwf	 0x2F            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1000
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x2F            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x2F            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0005a4	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0005a4	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0005a4: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0005a9	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0005a8: goto	 l_0005ab	 	  ; (OP_GOTO, isEnd)
l_0005a9: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0005ab: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0005ae	 	  ; (OP_GOTO, ifThen)
i_0005ad: goto	 l_0005b2	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_e
l_0005ae: bcf	 0x23            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_e
    ; INT_INCREMENT_VARIABLE Tselesai overlap to  overflow to 
          incf	 0x5D            , 1	  ; (OP_INCF, addr, DEST_F, name) ; Tselesai
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x5E            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; Tselesai
l_0005b2: goto	 l_0005b5	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Tselesai:=0x0(0)
    ; CopyLitToReg
l_0005b3: clrf	 0x5D            	  ; (OP_CLRF, addr + i, 0, comment) ; Tselesai(0x5D):=0(0x0)
          clrf	 0x5E            	  ; (OP_CLRF, addr + i, 0, comment) ; Tselesai(0x5D):=0(0x0)
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_e
l_0005b5: btfss	 0x23            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_e
          goto	 l_0005bd	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_e_ONE_SHOT_RISING_
          btfss	 0x24            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_e_ONE_SHOT_RISING_
          goto	 l_0005bb	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_e
          bcf	 0x23            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_e
i_0005ba: goto	 l_0005bc	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_e_ONE_SHOT_RISING_
l_0005bb: bsf	 0x24            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_e_ONE_SHOT_RISING_
l_0005bc: goto	 l_0005be	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_e_ONE_SHOT_RISING_
l_0005bd: bcf	 0x24            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_e_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_e
l_0005be: btfss	 0x23            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_e
          goto	 l_0005c2	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL CD1:=0x0(0)
    ; CopyLitToReg
          clrf	 0x53            	  ; (OP_CLRF, addr + i, 0, comment) ; CD1(0x53):=0(0x0)
          clrf	 0x54            	  ; (OP_CLRF, addr + i, 0, comment) ; CD1(0x53):=0(0x0)
    ; INT_COPY_BIT_TO_BIT $parThis_f:=$parThis_e
l_0005c2: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x24            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x23            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x24            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_f
          btfss	 0x24            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_f
          goto	 l_0005c9	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Rmulai
          bcf	 0x21            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; Rmulai
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_e
l_0005c9: btfss	 0x23            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_e
          goto	 l_0005cf	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE bilangan := bilangan2
    ; CopyRegToReg
          movf	 0x4F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan2
          movwf	 0x51            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; bilangan
          movf	 0x50            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan2
          movwf	 0x52            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; bilangan
    ; ] finish parallel
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 12 =======
    ; INT_SET_BIT $rung_top
l_0005cf: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0005df	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          movf	 0x53            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0005de	 	  ; (OP_GOTO, ifThen)
          movf	 0x54            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0005de	 	  ; (OP_GOTO, ifThen)
i_0005dd: goto	 l_0005df	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0005de: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT YD1:=$rung_top
l_0005df: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x08            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x08            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; 
    ; ======= START RUNG 13 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Rmulai
          btfsc	 0x21            , 7	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Rmulai
          goto	 l_0005ea	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_TCY Tcountdown 500000
    ; INT_IF_BIT_SET $rung_top
l_0005ea: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00061f	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Tcountdown 500
    ; CopyRegToReg
          movf	 0x5F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Tcountdown
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x60            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Tcountdown
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xF4             	  ; (OP_MOVLW, lNow, 0, comment) ; 500
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 500
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 500
          movwf	 0x2F            	  ; (OP_MOVWF, addr + i, 0, comment) ; 500
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x2F            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x2F            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000606	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2F            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000606	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000606: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00060b	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_00060a: goto	 l_00060d	 	  ; (OP_GOTO, isEnd)
l_00060b: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_00060d: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000610	 	  ; (OP_GOTO, ifThen)
i_00060f: goto	 l_000614	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE Tcountdown overlap to  overflow to 
l_000610: incf	 0x5F            , 1	  ; (OP_INCF, addr, DEST_F, name) ; Tcountdown
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x60            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; Tcountdown
i_000613: goto	 l_00061b	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Tcountdown:=0x0(0)
    ; CopyLitToReg
l_000614: clrf	 0x5F            	  ; (OP_CLRF, addr + i, 0, comment) ; Tcountdown(0x5F):=0(0x0)
          clrf	 0x60            	  ; (OP_CLRF, addr + i, 0, comment) ; Tcountdown(0x5F):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_f_TCY_Tcountdown
          btfsc	 0x24            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_f_TCY_Tcountdown
          goto	 l_00061a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_f_TCY_Tcountdown
          bsf	 0x24            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_f_TCY_Tcountdown
i_000619: goto	 l_00061b	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_f_TCY_Tcountdown
l_00061a: bcf	 0x24            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_f_TCY_Tcountdown
    ; INT_IF_BIT_CLEAR $once_f_TCY_Tcountdown
l_00061b: btfsc	 0x24            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_f_TCY_Tcountdown
          goto	 l_00061e	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_00061e: goto	 l_000621	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Tcountdown:=0x0(0)
    ; CopyLitToReg
l_00061f: clrf	 0x5F            	  ; (OP_CLRF, addr + i, 0, comment) ; Tcountdown(0x5F):=0(0x0)
          clrf	 0x60            	  ; (OP_CLRF, addr + i, 0, comment) ; Tcountdown(0x5F):=0(0x0)
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $rung_top
l_000621: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000629	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_10_ONE_SHOT_RISING_
          btfss	 0x24            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_10_ONE_SHOT_RISING_
          goto	 l_000627	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_000626: goto	 l_000628	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_10_ONE_SHOT_RISING_
l_000627: bsf	 0x24            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_10_ONE_SHOT_RISING_
l_000628: goto	 l_00062a	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_10_ONE_SHOT_RISING_
l_000629: bcf	 0x24            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_10_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_SUB
    ; INT_IF_BIT_SET $rung_top
l_00062a: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00063b	 	  ; (OP_GOTO, condFalse)
    ; INT_DECREMENT_VARIABLE bilangan overlap to $overlap overflow to ROverflowFlagV
          movf	 0x52            , 0 	  ; (OP_MOVF, addr + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          movlw	 0x01             	  ; (OP_MOVLW, 1)
          subwf	 0x51            , 1	  ; (OP_SUBWF, addr, DEST_F, name) ; bilangan
          btfss	 0x03            , 0	  ; (OP_BTFSS, 0x03, 0)
          subwf	 0x52            , 1	  ; (OP_SUBWF, addr + 1, DEST_F, name) ; bilangan
    ; CopyNotBit
          btfsc	 0x03            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc) ; STATUS_C
          bcf	 0x28            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $overlap
          btfss	 0x03            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc) ; STATUS_C
          bsf	 0x28            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $overlap
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00063b	 	  ; (OP_GOTO, notOverflow)
          btfsc	 0x52            , 7	  ; (OP_BTFSC, addr + sov - 1, 7)
          goto	 l_00063b	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 6	  ; (OP_BSF, addrO, bitO)
    ; INT_COPY_BIT_TO_BIT $parThis_10:=$rung_top
l_00063b: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x24            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x24            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_10
          btfss	 0x24            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_10
          goto	 l_000660	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT bilangan 0
    ; CopyLitToReg
          clrf	 0x2A            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x2B            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x52            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x51            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x52            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x52            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000655	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x52            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000655	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000655: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00065a	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000659: goto	 l_00065c	 	  ; (OP_GOTO, isEnd)
l_00065a: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_00065c: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00065f	 	  ; (OP_GOTO, ifThen)
i_00065e: goto	 l_000660	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_10
l_00065f: bcf	 0x24            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_10
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_10
l_000660: btfss	 0x24            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_10
          goto	 l_000664	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL bilangan:=0x0(0)
    ; CopyLitToReg
          clrf	 0x51            	  ; (OP_CLRF, addr + i, 0, comment) ; bilangan(0x51):=0(0x0)
          clrf	 0x52            	  ; (OP_CLRF, addr + i, 0, comment) ; bilangan(0x51):=0(0x0)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 14 =======
    ; INT_SET_BIT $rung_top
l_000664: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_SHORT
    ; start parallel [
    ; ELEM_DIV
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000677	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0x64(100)
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x55):=100(0x64)
          movwf	 0x55            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x55):=100(0x64)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x55):=100(0x64)
    ; INT_SET_VARIABLE_DIVIDE ratusan := bilangan / $scratch2
    ; CopyRegToReg
          movf	 0x51            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x52            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000038	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x2A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x5B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ratusan
          movf	 0x2B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x5C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ratusan
l_000677: bcf	 0x0A            , 3	  ;  PS(0x18,0x06) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000678: bcf	 0x0A            , 4	  ;  PS(0x18,0x06) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_MUL
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00068b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0x64(100)
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x55):=100(0x64)
          movwf	 0x55            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x55):=100(0x64)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x55):=100(0x64)
    ; INT_SET_VARIABLE_MULTIPLY ratus := ratusan * $scratch2
    ; CopyRegToReg
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratusan
          movwf	 0x2C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratusan
          movwf	 0x2D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x2C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x61            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ratus
          movf	 0x2D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x62            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ratus
l_00068b: bcf	 0x0A            , 3	  ;  PS(0x18,0x06) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00068c: bcf	 0x0A            , 4	  ;  PS(0x18,0x06) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_SUB
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0006a4	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ratussisa := bilangan - ratus; '$overlap'; 'ROverflowFlagV'
    ; CopyRegToReg
          movf	 0x51            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan
          movwf	 0x63            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x52            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; bilangan
          movwf	 0x64            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; save sign
          movf	 0x64            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x62            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x61            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x63            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x62            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x62            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x64            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0006a4	 	  ; (OP_GOTO, notOverflow)
          movf	 0x64            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x62            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0006a4	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; CopyRegToReg
    ; ELEM_DIV
    ; INT_IF_BIT_SET $rung_top
l_0006a4: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0006b6	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x55):=10(0xA)
          movwf	 0x55            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x55):=10(0xA)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x55):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE puluhan := ratussisa / $scratch2
    ; CopyRegToReg
          movf	 0x63            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratussisa
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x64            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratussisa
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000038	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x2A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x57            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; puluhan
          movf	 0x2B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x58            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; puluhan
l_0006b6: bcf	 0x0A            , 3	  ;  PS(0x18,0x06) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0006b7: bcf	 0x0A            , 4	  ;  PS(0x18,0x06) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_MUL
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0006ca	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x55):=10(0xA)
          movwf	 0x55            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x55):=10(0xA)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x55):=10(0xA)
    ; INT_SET_VARIABLE_MULTIPLY puluh := puluhan * $scratch2
    ; CopyRegToReg
          movf	 0x57            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; puluhan
          movwf	 0x2C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x58            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; puluhan
          movwf	 0x2D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x2B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x2C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x65            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; puluh
          movf	 0x2D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x66            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; puluh
l_0006ca: bcf	 0x0A            , 3	  ;  PS(0x18,0x06) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0006cb: bcf	 0x0A            , 4	  ;  PS(0x18,0x06) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_SUB
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0006e3	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT satuan := ratussisa - puluh; '$overlap'; 'ROverflowFlagV'
    ; CopyRegToReg
          movf	 0x63            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratussisa
          movwf	 0x59            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x64            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratussisa
          movwf	 0x5A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; save sign
          movf	 0x5A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x66            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x65            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x59            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x66            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x66            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x5A            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0006e3	 	  ; (OP_GOTO, notOverflow)
          movf	 0x5A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x66            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0006e3	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; CopyRegToReg
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_0006e3: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0006e9	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE digit1 := satuan
    ; CopyRegToReg
          movf	 0x59            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; satuan
          movwf	 0x45            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit1
          movf	 0x5A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; satuan
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit1
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_0006e9: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0006ef	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE digit2 := puluhan
    ; CopyRegToReg
          movf	 0x57            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; puluhan
          movwf	 0x4D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit2
          movf	 0x58            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; puluhan
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit2
    ; INT_COPY_BIT_TO_BIT $parThis_11:=$rung_top
l_0006ef: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x24            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x24            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_11
          btfss	 0x24            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_11
          goto	 l_000701	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          clrf	 0x2E            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          movf	 0x57            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000700	 	  ; (OP_GOTO, ifThen)
          movf	 0x58            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000700	 	  ; (OP_GOTO, ifThen)
i_0006ff: goto	 l_000701	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_11
l_000700: bcf	 0x24            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_11
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_11
l_000701: btfss	 0x24            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_11
          goto	 l_000723	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT bilangan 99
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; 99
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 99
          clrf	 0x2B            	  ; (OP_CLRF, addr + i, 0, comment) ; 99
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x52            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x51            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x52            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x52            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000718	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2B            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x52            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000718	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000718: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00071d	 	  ; (OP_GOTO, is0)
          btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_00071c: goto	 l_00071f	 	  ; (OP_GOTO, isEnd)
l_00071d: btfsc	 0x2B            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_00071f: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000722	 	  ; (OP_GOTO, ifThen)
i_000721: goto	 l_000723	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_11
l_000722: bcf	 0x24            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_11
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_11
l_000723: btfss	 0x24            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_11
          goto	 l_000728	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL digit2:=0x63(99)
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; digit2(0x4D):=99(0x63)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; digit2(0x4D):=99(0x63)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; digit2(0x4D):=99(0x63)
    ; ] finish series
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000728: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00072e	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE digit3 := ratusan
    ; CopyRegToReg
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratusan
          movwf	 0x4B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit3
          movf	 0x5C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ratusan
          movwf	 0x4C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit3
    ; INT_COPY_BIT_TO_BIT $parThis_11:=$rung_top
l_00072e: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x24            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x24            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_11
          btfss	 0x24            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_11
          goto	 l_000740	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          clrf	 0x2E            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          movf	 0x5B            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00073f	 	  ; (OP_GOTO, ifThen)
          movf	 0x5C            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00073f	 	  ; (OP_GOTO, ifThen)
i_00073e: goto	 l_000740	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_11
l_00073f: bcf	 0x24            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_11
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_11
l_000740: btfss	 0x24            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_11
          goto	 l_000745	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL digit3:=0x63(99)
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; digit3(0x4B):=99(0x63)
          movwf	 0x4B            	  ; (OP_MOVWF, addr + i, 0, comment) ; digit3(0x4B):=99(0x63)
          clrf	 0x4C            	  ; (OP_CLRF, addr + i, 0, comment) ; digit3(0x4B):=99(0x63)
    ; ] finish series
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000745: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00074a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL digitg4:=0x63(99)
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; digitg4(0x67):=99(0x63)
          movwf	 0x67            	  ; (OP_MOVWF, addr + i, 0, comment) ; digitg4(0x67):=99(0x63)
          clrf	 0x68            	  ; (OP_CLRF, addr + i, 0, comment) ; digitg4(0x67):=99(0x63)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 15 =======
    ; INT_SET_BIT $rung_top
l_00074a: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_12:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x24            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x24            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_12
          btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_000759	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000758	 	  ; (OP_GOTO, ifThen)
i_000757: goto	 l_000759	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_12
l_000758: bcf	 0x24            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_12
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_12
l_000759: btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_000761	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_11_ONE_SHOT_RISING_
          btfss	 0x25            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_11_ONE_SHOT_RISING_
          goto	 l_00075f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_12
          bcf	 0x24            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_12
i_00075e: goto	 l_000760	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_11_ONE_SHOT_RISING_
l_00075f: bsf	 0x25            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_11_ONE_SHOT_RISING_
l_000760: goto	 l_000762	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_11_ONE_SHOT_RISING_
l_000761: bcf	 0x25            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_11_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_12
l_000762: btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_000768	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE dp := digit3
    ; CopyRegToReg
          movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit3
          movwf	 0x69            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; dp
          movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit3
          movwf	 0x6A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; dp
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_12
l_000768: btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_00076c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL Csr:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Csr(0x3E):=1(0x1)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; Csr(0x3E):=1(0x1)
    ; ] finish parallel
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_12:=$rung_top
l_00076c: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x24            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x24            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_12
          btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_00077a	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000779	 	  ; (OP_GOTO, ifThen)
i_000778: goto	 l_00077a	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_12
l_000779: bcf	 0x24            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_12
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_12
l_00077a: btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_000782	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_12_ONE_SHOT_RISING_
          btfss	 0x25            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_12_ONE_SHOT_RISING_
          goto	 l_000780	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_12
          bcf	 0x24            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_12
i_00077f: goto	 l_000781	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_12_ONE_SHOT_RISING_
l_000780: bsf	 0x25            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_12_ONE_SHOT_RISING_
l_000781: goto	 l_000783	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_12_ONE_SHOT_RISING_
l_000782: bcf	 0x25            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_12_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_12
l_000783: btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_000789	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE dp := digit2
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x69            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; dp
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x6A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; dp
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_12
l_000789: btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_00078d	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL Csr:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Csr(0x3E):=1(0x1)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; Csr(0x3E):=1(0x1)
    ; ] finish parallel
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_12:=$rung_top
l_00078d: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x24            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x24            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_12
          btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_00079b	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00079a	 	  ; (OP_GOTO, ifThen)
i_000799: goto	 l_00079b	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_12
l_00079a: bcf	 0x24            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_12
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_12
l_00079b: btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_0007a3	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_13_ONE_SHOT_RISING_
          btfss	 0x25            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_13_ONE_SHOT_RISING_
          goto	 l_0007a1	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_12
          bcf	 0x24            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_12
i_0007a0: goto	 l_0007a2	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_13_ONE_SHOT_RISING_
l_0007a1: bsf	 0x25            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_13_ONE_SHOT_RISING_
l_0007a2: goto	 l_0007a4	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_13_ONE_SHOT_RISING_
l_0007a3: bcf	 0x25            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_13_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_12
l_0007a4: btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_0007aa	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE dp := digit1
    ; CopyRegToReg
          movf	 0x45            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x69            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; dp
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit1
          movwf	 0x6A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; dp
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_12
l_0007aa: btfss	 0x24            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_12
          goto	 l_0007ae	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL Csr:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Csr(0x3E):=1(0x1)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; Csr(0x3E):=1(0x1)
    ; ] finish parallel
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 16 =======
    ; INT_SET_BIT $rung_top
l_0007ae: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Rsr
          btfsc	 0x25            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Rsr
          goto	 l_0007b2	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_IF_BIT_SET $rung_top
l_0007b2: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0007b6	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Rsr
          bcf	 0x25            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; Rsr
i_0007b5: goto	 l_0007b7	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT Rsr
l_0007b6: bsf	 0x25            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; Rsr
    ; ] finish series
    ; 
    ; ======= START RUNG 17 =======
    ; INT_SET_BIT $rung_top
l_0007b7: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0007d7	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Cdigit 1
    ; CopyRegToReg
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Cdigit
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0007cc	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0007cc	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0007cc: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0007d1	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0007d0: goto	 l_0007d3	 	  ; (OP_GOTO, isEnd)
l_0007d1: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0007d3: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0007d6	 	  ; (OP_GOTO, ifThen)
i_0007d5: goto	 l_0007d7	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0007d6: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $rung_top
l_0007d7: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0007f4	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 16
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0007e9	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0007e9	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0007e9: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0007ee	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0007ed: goto	 l_0007f0	 	  ; (OP_GOTO, isEnd)
l_0007ee: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0007f0: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0007f3	 	  ; (OP_GOTO, ifThen)
i_0007f2: goto	 l_0007f4	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0007f3: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_13:=$rung_top
l_0007f4: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Rsr
          btfsc	 0x25            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Rsr
          goto	 l_0007fb	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_13
          bcf	 0x25            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_13
l_0007fb: bsf	 0x0A            , 3	  ;  PS(0x07,0x08) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
i_0007fc: bsf	 0x0A            , 3	  ;  PS(0x07,0x08) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
    ; ELEM_CTC
    ; INT_IF_BIT_SET $parThis_13
          btfss	 0x25            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_13
          goto	 l_000822	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_13
          bcf	 0x25            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_13
    ; INT_IF_BIT_CLEAR $once_14_CTC_Csr
          btfsc	 0x25            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_14_CTC_Csr
          goto	 l_000821	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_14_CTC_Csr
          bsf	 0x25            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_14_CTC_Csr
    ; INT_INCREMENT_VARIABLE Csr overlap to  overflow to 
          incf	 0x3E            , 1	  ; (OP_INCF, addr, DEST_F, name) ; Csr
    ; INT_IF_GRT Csr 17
    ; CopyLitToReg
          movlw	 0x11             	  ; (OP_MOVLW, lNow, 0, comment) ; 17
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 17
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000814	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000814	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000814: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000819	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000818: goto	 l_00081b	 	  ; (OP_GOTO, isEnd)
l_000819: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_00081b: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00081e	 	  ; (OP_GOTO, ifThen)
i_00081d: goto	 l_000821	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Csr:=0x1(1)
    ; CopyLitToReg
l_00081e: movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Csr(0x3E):=1(0x1)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; Csr(0x3E):=1(0x1)
    ; INT_SET_BIT $parThis_13
          bsf	 0x25            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parThis_13
l_000821: goto	 l_000823	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_14_CTC_Csr
l_000822: bcf	 0x25            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_14_CTC_Csr
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_13:=$rung_top
l_000823: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_1
          bcf	 0x25            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
          btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_00083a	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          clrf	 0x2E            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000839	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000839	 	  ; (OP_GOTO, ifThen)
i_000838: goto	 l_00083a	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000839: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_14
l_00083a: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000859	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 5
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; 5
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 5
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00084e	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00084e	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00084e: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000853	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000852: goto	 l_000855	 	  ; (OP_GOTO, isEnd)
l_000853: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000855: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000858	 	  ; (OP_GOTO, ifThen)
i_000857: goto	 l_000859	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000858: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_14
l_000859: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000876	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 16
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00086b	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00086b	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00086b: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000870	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_00086f: goto	 l_000872	 	  ; (OP_GOTO, isEnd)
l_000870: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000872: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000875	 	  ; (OP_GOTO, ifThen)
i_000874: goto	 l_000876	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000875: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
l_000876: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000879	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
l_000879: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_00088c	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00088b	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00088b	 	  ; (OP_GOTO, ifThen)
i_00088a: goto	 l_00088c	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_00088b: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_14
l_00088c: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_0008ab	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 11
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; 11
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 11
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0008a0	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0008a0	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0008a0: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0008a5	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0008a4: goto	 l_0008a7	 	  ; (OP_GOTO, isEnd)
l_0008a5: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0008a7: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0008aa	 	  ; (OP_GOTO, ifThen)
i_0008a9: goto	 l_0008ab	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_0008aa: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_14
l_0008ab: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_0008c8	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 14
    ; CopyLitToReg
          movlw	 0x0E             	  ; (OP_MOVLW, lNow, 0, comment) ; 14
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 14
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0008bd	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0008bd	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0008bd: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0008c2	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0008c1: goto	 l_0008c4	 	  ; (OP_GOTO, isEnd)
l_0008c2: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0008c4: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0008c7	 	  ; (OP_GOTO, ifThen)
i_0008c6: goto	 l_0008c8	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_0008c7: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
l_0008c8: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_0008cb	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
l_0008cb: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_0008de	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 2
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008dd	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008dd	 	  ; (OP_GOTO, ifThen)
i_0008dc: goto	 l_0008de	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_0008dd: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_2
l_0008de: bcf	 0x26            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_2
    ; INT_COPY_BIT_TO_BIT $parThis_15:=$parThis_14
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_15
          btfss	 0x26            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_15
          goto	 l_000902	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 3
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0008f7	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0008f7	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0008f7: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0008fc	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0008fb: goto	 l_0008fe	 	  ; (OP_GOTO, isEnd)
l_0008fc: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0008fe: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000901	 	  ; (OP_GOTO, ifThen)
i_000900: goto	 l_000902	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_15
l_000901: bcf	 0x26            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_15
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_15
l_000902: btfss	 0x26            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_15
          goto	 l_00091f	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 4
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000914	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000914	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000914: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000919	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000918: goto	 l_00091b	 	  ; (OP_GOTO, isEnd)
l_000919: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_00091b: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00091e	 	  ; (OP_GOTO, ifThen)
i_00091d: goto	 l_00091f	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_15
l_00091e: bcf	 0x26            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_15
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_15
l_00091f: btfss	 0x26            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_15
          goto	 l_000922	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_2
          bsf	 0x26            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_2
    ; INT_COPY_BIT_TO_BIT $parThis_15:=$parThis_14
l_000922: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_15
          btfss	 0x26            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_15
          goto	 l_000945	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 7
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; 7
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 7
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00093a	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00093a	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00093a: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00093f	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_00093e: goto	 l_000941	 	  ; (OP_GOTO, isEnd)
l_00093f: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000941: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000944	 	  ; (OP_GOTO, ifThen)
i_000943: goto	 l_000945	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_15
l_000944: bcf	 0x26            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_15
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_15
l_000945: btfss	 0x26            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_15
          goto	 l_000962	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 10
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; 10
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 10
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000957	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000957	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000957: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00095c	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_00095b: goto	 l_00095e	 	  ; (OP_GOTO, isEnd)
l_00095c: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_00095e: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000961	 	  ; (OP_GOTO, ifThen)
i_000960: goto	 l_000962	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_15
l_000961: bcf	 0x26            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_15
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_15
l_000962: btfss	 0x26            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_15
          goto	 l_000965	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_2
          bsf	 0x26            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_2
    ; INT_COPY_BIT_TO_BIT $parThis_15:=$parThis_14
l_000965: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_15
          btfss	 0x26            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_15
          goto	 l_000988	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 13
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0D             	  ; (OP_MOVLW, lNow, 0, comment) ; 13
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 13
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00097d	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00097d	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00097d: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000982	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000981: goto	 l_000984	 	  ; (OP_GOTO, isEnd)
l_000982: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000984: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000987	 	  ; (OP_GOTO, ifThen)
i_000986: goto	 l_000988	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_15
l_000987: bcf	 0x26            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_15
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_15
l_000988: btfss	 0x26            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_15
          goto	 l_0009a5	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 16
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00099a	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00099a	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00099a: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00099f	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_00099e: goto	 l_0009a1	 	  ; (OP_GOTO, isEnd)
l_00099f: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0009a1: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0009a4	 	  ; (OP_GOTO, ifThen)
i_0009a3: goto	 l_0009a5	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_15
l_0009a4: bcf	 0x26            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_15
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_15
l_0009a5: btfss	 0x26            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_15
          goto	 l_0009a8	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_2
          bsf	 0x26            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_2
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parOut_2
l_0009a8: btfsc	 0x26            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x26            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_0009af	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
l_0009af: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_0009c2	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 3
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0009c1	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0009c1	 	  ; (OP_GOTO, ifThen)
i_0009c0: goto	 l_0009c2	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_0009c1: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_3
l_0009c2: bcf	 0x26            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_3
    ; INT_COPY_BIT_TO_BIT $parThis_16:=$parThis_14
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_16
          btfss	 0x26            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_16
          goto	 l_0009e6	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 3
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0009db	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0009db	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0009db: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0009e0	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0009df: goto	 l_0009e2	 	  ; (OP_GOTO, isEnd)
l_0009e0: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0009e2: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0009e5	 	  ; (OP_GOTO, ifThen)
i_0009e4: goto	 l_0009e6	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_16
l_0009e5: bcf	 0x26            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_16
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_16
l_0009e6: btfss	 0x26            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_16
          goto	 l_000a03	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 4
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0009f8	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0009f8	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0009f8: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0009fd	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_0009fc: goto	 l_0009ff	 	  ; (OP_GOTO, isEnd)
l_0009fd: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_0009ff: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000a02	 	  ; (OP_GOTO, ifThen)
i_000a01: goto	 l_000a03	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_16
l_000a02: bcf	 0x26            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_16
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_16
l_000a03: btfss	 0x26            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_16
          goto	 l_000a06	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_3
          bsf	 0x26            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_3
    ; INT_COPY_BIT_TO_BIT $parThis_16:=$parThis_14
l_000a06: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_16
          btfss	 0x26            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_16
          goto	 l_000a29	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 9
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; 9
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 9
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000a1e	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000a1e	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000a1e: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000a23	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000a22: goto	 l_000a25	 	  ; (OP_GOTO, isEnd)
l_000a23: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000a25: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000a28	 	  ; (OP_GOTO, ifThen)
i_000a27: goto	 l_000a29	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_16
l_000a28: bcf	 0x26            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_16
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_16
l_000a29: btfss	 0x26            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_16
          goto	 l_000a46	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 16
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000a3b	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000a3b	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000a3b: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000a40	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000a3f: goto	 l_000a42	 	  ; (OP_GOTO, isEnd)
l_000a40: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000a42: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000a45	 	  ; (OP_GOTO, ifThen)
i_000a44: goto	 l_000a46	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_16
l_000a45: bcf	 0x26            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_16
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_16
l_000a46: btfss	 0x26            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_16
          goto	 l_000a49	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_3
          bsf	 0x26            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_3
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parOut_3
l_000a49: btfsc	 0x26            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x26            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000a50	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
l_000a50: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000a63	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 4
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a62	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a62	 	  ; (OP_GOTO, ifThen)
i_000a61: goto	 l_000a63	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000a62: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_4
l_000a63: bcf	 0x26            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_4
    ; INT_COPY_BIT_TO_BIT $parThis_17:=$parThis_14
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_17
          btfss	 0x26            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_17
          goto	 l_000a87	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 3
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000a7c	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000a7c	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000a7c: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000a81	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000a80: goto	 l_000a83	 	  ; (OP_GOTO, isEnd)
l_000a81: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000a83: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000a86	 	  ; (OP_GOTO, ifThen)
i_000a85: goto	 l_000a87	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_17
l_000a86: bcf	 0x26            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_17
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_17
l_000a87: btfss	 0x26            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_17
          goto	 l_000aa4	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 6
    ; CopyLitToReg
          movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; 6
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 6
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000a99	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000a99	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000a99: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000a9e	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000a9d: goto	 l_000aa0	 	  ; (OP_GOTO, isEnd)
l_000a9e: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000aa0: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000aa3	 	  ; (OP_GOTO, ifThen)
i_000aa2: goto	 l_000aa4	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_17
l_000aa3: bcf	 0x26            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_17
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_17
l_000aa4: btfss	 0x26            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_17
          goto	 l_000aa7	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_4
          bsf	 0x26            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_4
    ; INT_COPY_BIT_TO_BIT $parThis_17:=$parThis_14
l_000aa7: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_17
          btfss	 0x26            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_17
          goto	 l_000aca	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 11
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; 11
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 11
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000abf	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000abf	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000abf: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000ac4	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000ac3: goto	 l_000ac6	 	  ; (OP_GOTO, isEnd)
l_000ac4: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000ac6: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000ac9	 	  ; (OP_GOTO, ifThen)
i_000ac8: goto	 l_000aca	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_17
l_000ac9: bcf	 0x26            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_17
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_17
l_000aca: btfss	 0x26            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_17
          goto	 l_000ae7	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 14
    ; CopyLitToReg
          movlw	 0x0E             	  ; (OP_MOVLW, lNow, 0, comment) ; 14
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 14
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000adc	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000adc	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000adc: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000ae1	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000ae0: goto	 l_000ae3	 	  ; (OP_GOTO, isEnd)
l_000ae1: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000ae3: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000ae6	 	  ; (OP_GOTO, ifThen)
i_000ae5: goto	 l_000ae7	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_17
l_000ae6: bcf	 0x26            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_17
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_17
l_000ae7: btfss	 0x26            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_17
          goto	 l_000aea	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_4
          bsf	 0x26            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_4
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parOut_4
l_000aea: btfsc	 0x26            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x26            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000af1	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
l_000af1: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000b04	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; 5
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 5
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 5
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000b03	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000b03	 	  ; (OP_GOTO, ifThen)
i_000b02: goto	 l_000b04	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000b03: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_5
l_000b04: bcf	 0x26            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_5
    ; INT_COPY_BIT_TO_BIT $parThis_18:=$parThis_14
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_18
          btfss	 0x26            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_18
          goto	 l_000b28	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 3
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000b1d	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000b1d	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000b1d: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000b22	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000b21: goto	 l_000b24	 	  ; (OP_GOTO, isEnd)
l_000b22: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000b24: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000b27	 	  ; (OP_GOTO, ifThen)
i_000b26: goto	 l_000b28	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_18
l_000b27: bcf	 0x26            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_18
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_18
l_000b28: btfss	 0x26            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_18
          goto	 l_000b45	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 6
    ; CopyLitToReg
          movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; 6
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 6
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000b3a	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000b3a	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000b3a: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000b3f	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000b3e: goto	 l_000b41	 	  ; (OP_GOTO, isEnd)
l_000b3f: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000b41: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000b44	 	  ; (OP_GOTO, ifThen)
i_000b43: goto	 l_000b45	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_18
l_000b44: bcf	 0x26            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_18
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_18
l_000b45: btfss	 0x26            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_18
          goto	 l_000b48	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_5
          bsf	 0x26            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_5
    ; INT_COPY_BIT_TO_BIT $parThis_18:=$parThis_14
l_000b48: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_18
          btfss	 0x26            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_18
          goto	 l_000b6b	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 9
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; 9
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 9
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000b60	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000b60	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000b60: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000b65	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000b64: goto	 l_000b67	 	  ; (OP_GOTO, isEnd)
l_000b65: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000b67: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000b6a	 	  ; (OP_GOTO, ifThen)
i_000b69: goto	 l_000b6b	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_18
l_000b6a: bcf	 0x26            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_18
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_18
l_000b6b: btfss	 0x26            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_18
          goto	 l_000b88	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 12
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000b7d	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000b7d	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000b7d: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000b82	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000b81: goto	 l_000b84	 	  ; (OP_GOTO, isEnd)
l_000b82: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000b84: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000b87	 	  ; (OP_GOTO, ifThen)
i_000b86: goto	 l_000b88	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_18
l_000b87: bcf	 0x26            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_18
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_18
l_000b88: btfss	 0x26            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_18
          goto	 l_000b8b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_5
          bsf	 0x26            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_5
    ; INT_COPY_BIT_TO_BIT $parThis_18:=$parThis_14
l_000b8b: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x26            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x26            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_18
          btfss	 0x26            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_18
          goto	 l_000bae	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 15
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0F             	  ; (OP_MOVLW, lNow, 0, comment) ; 15
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 15
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000ba3	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000ba3	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000ba3: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000ba8	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000ba7: goto	 l_000baa	 	  ; (OP_GOTO, isEnd)
l_000ba8: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000baa: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000bad	 	  ; (OP_GOTO, ifThen)
i_000bac: goto	 l_000bae	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_18
l_000bad: bcf	 0x26            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_18
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_18
l_000bae: btfss	 0x26            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_18
          goto	 l_000bcb	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 16
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000bc0	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000bc0	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000bc0: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000bc5	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000bc4: goto	 l_000bc7	 	  ; (OP_GOTO, isEnd)
l_000bc5: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000bc7: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000bca	 	  ; (OP_GOTO, ifThen)
i_000bc9: goto	 l_000bcb	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_18
l_000bca: bcf	 0x26            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_18
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_18
l_000bcb: btfss	 0x26            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_18
          goto	 l_000bce	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_5
          bsf	 0x26            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_5
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parOut_5
l_000bce: btfsc	 0x26            , 6	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x26            , 6	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000bd5	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
l_000bd5: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000be8	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; 6
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 6
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 6
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000be7	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000be7	 	  ; (OP_GOTO, ifThen)
i_000be6: goto	 l_000be8	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000be7: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_6
l_000be8: bcf	 0x27            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_6
    ; INT_COPY_BIT_TO_BIT $parThis_19:=$parThis_14
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_19
          btfss	 0x27            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_19
          goto	 l_000c0c	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 3
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000c01	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000c01	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000c01: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000c06	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000c05: goto	 l_000c08	 	  ; (OP_GOTO, isEnd)
l_000c06: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000c08: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000c0b	 	  ; (OP_GOTO, ifThen)
i_000c0a: goto	 l_000c0c	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_19
l_000c0b: bcf	 0x27            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_19
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_19
l_000c0c: btfss	 0x27            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_19
          goto	 l_000c29	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 12
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000c1e	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000c1e	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000c1e: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000c23	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000c22: goto	 l_000c25	 	  ; (OP_GOTO, isEnd)
l_000c23: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000c25: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000c28	 	  ; (OP_GOTO, ifThen)
i_000c27: goto	 l_000c29	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_19
l_000c28: bcf	 0x27            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_19
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_19
l_000c29: btfss	 0x27            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_19
          goto	 l_000c2c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_6
          bsf	 0x27            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_6
    ; INT_COPY_BIT_TO_BIT $parThis_19:=$parThis_14
l_000c2c: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_19
          btfss	 0x27            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_19
          goto	 l_000c4f	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 15
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0F             	  ; (OP_MOVLW, lNow, 0, comment) ; 15
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 15
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000c44	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000c44	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000c44: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000c49	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000c48: goto	 l_000c4b	 	  ; (OP_GOTO, isEnd)
l_000c49: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000c4b: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000c4e	 	  ; (OP_GOTO, ifThen)
i_000c4d: goto	 l_000c4f	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_19
l_000c4e: bcf	 0x27            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_19
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_19
l_000c4f: btfss	 0x27            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_19
          goto	 l_000c6c	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 16
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000c61	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000c61	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000c61: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000c66	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000c65: goto	 l_000c68	 	  ; (OP_GOTO, isEnd)
l_000c66: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000c68: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000c6b	 	  ; (OP_GOTO, ifThen)
i_000c6a: goto	 l_000c6c	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_19
l_000c6b: bcf	 0x27            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_19
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_19
l_000c6c: btfss	 0x27            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_19
          goto	 l_000c6f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_6
          bsf	 0x27            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_6
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parOut_6
l_000c6f: btfsc	 0x27            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x27            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000c76	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
l_000c76: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000c89	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; 7
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 7
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 7
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000c88	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000c88	 	  ; (OP_GOTO, ifThen)
i_000c87: goto	 l_000c89	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000c88: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_14
l_000c89: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000ca8	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 11
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; 11
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 11
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000c9d	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000c9d	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000c9d: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000ca2	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000ca1: goto	 l_000ca4	 	  ; (OP_GOTO, isEnd)
l_000ca2: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000ca4: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000ca7	 	  ; (OP_GOTO, ifThen)
i_000ca6: goto	 l_000ca8	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000ca7: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_14
l_000ca8: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000cc5	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 16
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000cba	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000cba	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000cba: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000cbf	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000cbe: goto	 l_000cc1	 	  ; (OP_GOTO, isEnd)
l_000cbf: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000cc1: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000cc4	 	  ; (OP_GOTO, ifThen)
i_000cc3: goto	 l_000cc5	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000cc4: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
l_000cc5: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000cc8	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
l_000cc8: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000cdb	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; 8
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 8
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 8
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000cda	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000cda	 	  ; (OP_GOTO, ifThen)
i_000cd9: goto	 l_000cdb	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000cda: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_14
l_000cdb: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000cfa	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 3
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000cef	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000cef	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000cef: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000cf4	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000cf3: goto	 l_000cf6	 	  ; (OP_GOTO, isEnd)
l_000cf4: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000cf6: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000cf9	 	  ; (OP_GOTO, ifThen)
i_000cf8: goto	 l_000cfa	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000cf9: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_14
l_000cfa: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000d17	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 16
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000d0c	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000d0c	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000d0c: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000d11	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000d10: goto	 l_000d13	 	  ; (OP_GOTO, isEnd)
l_000d11: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000d13: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000d16	 	  ; (OP_GOTO, ifThen)
i_000d15: goto	 l_000d17	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000d16: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
l_000d17: btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000d1a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parThis_13
l_000d1a: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000d2d	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; 9
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 9
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 9
          movf	 0x69            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000d2c	 	  ; (OP_GOTO, ifThen)
          movf	 0x6A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000d2c	 	  ; (OP_GOTO, ifThen)
i_000d2b: goto	 l_000d2d	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_14
l_000d2c: bcf	 0x25            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_14
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_7
l_000d2d: bcf	 0x27            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_7
    ; INT_COPY_BIT_TO_BIT $parThis_1a:=$parThis_14
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_1a
          btfss	 0x27            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1a
          goto	 l_000d51	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 3
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000d46	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000d46	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000d46: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000d4b	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000d4a: goto	 l_000d4d	 	  ; (OP_GOTO, isEnd)
l_000d4b: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000d4d: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000d50	 	  ; (OP_GOTO, ifThen)
i_000d4f: goto	 l_000d51	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1a
l_000d50: bcf	 0x27            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1a
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_1a
l_000d51: btfss	 0x27            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1a
          goto	 l_000d6e	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 6
    ; CopyLitToReg
          movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; 6
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 6
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000d63	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000d63	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000d63: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000d68	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000d67: goto	 l_000d6a	 	  ; (OP_GOTO, isEnd)
l_000d68: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000d6a: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000d6d	 	  ; (OP_GOTO, ifThen)
i_000d6c: goto	 l_000d6e	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1a
l_000d6d: bcf	 0x27            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1a
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_1a
l_000d6e: btfss	 0x27            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1a
          goto	 l_000d71	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_7
          bsf	 0x27            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_7
    ; INT_COPY_BIT_TO_BIT $parThis_1a:=$parThis_14
l_000d71: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 7	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_1a
          btfss	 0x27            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1a
          goto	 l_000d94	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Csr 9
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Csr
          movwf	 0x2A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; 9
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 9
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x2E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000d89	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x2E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000d89	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000d89: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000d8e	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000d8d: goto	 l_000d90	 	  ; (OP_GOTO, isEnd)
l_000d8e: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000d90: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000d93	 	  ; (OP_GOTO, ifThen)
i_000d92: goto	 l_000d94	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1a
l_000d93: bcf	 0x27            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1a
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_1a
l_000d94: btfss	 0x27            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1a
          goto	 l_000db1	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Csr 16
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2A            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          bcf	 0x28            , 4	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3E            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000da6	 	  ; (OP_GOTO, notOverflow)
          movf	 0x2A            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000da6	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 4	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000da6: btfss	 0x28            , 4	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000dab	 	  ; (OP_GOTO, is0)
          btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x28            , 4	  ; (OP_BCF, addrDest, bitDest)
i_000daa: goto	 l_000dad	 	  ; (OP_GOTO, isEnd)
l_000dab: btfsc	 0x2A            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x28            , 4	  ; (OP_BSF, addrDest, bitDest)
l_000dad: btfsc	 0x28            , 4	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000db0	 	  ; (OP_GOTO, ifThen)
i_000daf: goto	 l_000db1	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1a
l_000db0: bcf	 0x27            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1a
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_1a
l_000db1: btfss	 0x27            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1a
          goto	 l_000db4	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_7
          bsf	 0x27            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_7
    ; INT_COPY_BIT_TO_BIT $parThis_14:=$parOut_7
l_000db4: btfsc	 0x27            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x27            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_14
          btfss	 0x25            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_14
          goto	 l_000dbb	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x25            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_13:=$parOut_1
l_000dbb: btfsc	 0x25            , 6	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 6	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yds:=$parThis_13
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x06            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x06            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_13:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_8
          bcf	 0x27            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_8
    ; INT_COPY_BIT_TO_BIT $parThis_1b:=$parThis_13
          btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1b
          btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000dd9	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000dd8	 	  ; (OP_GOTO, ifThen)
i_000dd7: goto	 l_000dd9	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1b
l_000dd8: bcf	 0x27            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1b
    ; INT_IF_BIT_SET $parThis_1b
l_000dd9: btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000ddc	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_8
          bsf	 0x27            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_8
    ; INT_COPY_BIT_TO_BIT $parThis_1b:=$parThis_13
l_000ddc: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1b
          btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000dea	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000de9	 	  ; (OP_GOTO, ifThen)
i_000de8: goto	 l_000dea	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1b
l_000de9: bcf	 0x27            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1b
    ; INT_IF_BIT_SET $parThis_1b
l_000dea: btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000ded	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_8
          bsf	 0x27            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_8
    ; INT_COPY_BIT_TO_BIT $parThis_1b:=$parThis_13
l_000ded: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1b
          btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000dfb	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; 6
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 6
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000dfa	 	  ; (OP_GOTO, ifThen)
i_000df9: goto	 l_000dfb	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1b
l_000dfa: bcf	 0x27            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1b
    ; INT_IF_BIT_SET $parThis_1b
l_000dfb: btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000dfe	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_8
          bsf	 0x27            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_8
    ; INT_COPY_BIT_TO_BIT $parThis_1b:=$parThis_13
l_000dfe: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1b
          btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e0c	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; 8
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 8
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000e0b	 	  ; (OP_GOTO, ifThen)
i_000e0a: goto	 l_000e0c	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1b
l_000e0b: bcf	 0x27            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1b
    ; INT_IF_BIT_SET $parThis_1b
l_000e0c: btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e0f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_8
          bsf	 0x27            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_8
    ; INT_COPY_BIT_TO_BIT $parThis_1b:=$parThis_13
l_000e0f: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1b
          btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e1d	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; 10
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 10
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000e1c	 	  ; (OP_GOTO, ifThen)
i_000e1b: goto	 l_000e1d	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1b
l_000e1c: bcf	 0x27            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1b
    ; INT_IF_BIT_SET $parThis_1b
l_000e1d: btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e20	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_8
          bsf	 0x27            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_8
    ; INT_COPY_BIT_TO_BIT $parThis_1b:=$parThis_13
l_000e20: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1b
          btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e2e	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000e2d	 	  ; (OP_GOTO, ifThen)
i_000e2c: goto	 l_000e2e	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1b
l_000e2d: bcf	 0x27            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1b
    ; INT_IF_BIT_SET $parThis_1b
l_000e2e: btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e31	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_8
          bsf	 0x27            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_8
    ; INT_COPY_BIT_TO_BIT $parThis_1b:=$parThis_13
l_000e31: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1b
          btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e3f	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x0E             	  ; (OP_MOVLW, lNow, 0, comment) ; 14
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 14
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000e3e	 	  ; (OP_GOTO, ifThen)
i_000e3d: goto	 l_000e3f	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1b
l_000e3e: bcf	 0x27            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1b
    ; INT_IF_BIT_SET $parThis_1b
l_000e3f: btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e42	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_8
          bsf	 0x27            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_8
    ; INT_COPY_BIT_TO_BIT $parThis_1b:=$parThis_13
l_000e42: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x27            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x27            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1b
          btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e50	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; 16
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 16
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000e4f	 	  ; (OP_GOTO, ifThen)
i_000e4e: goto	 l_000e50	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1b
l_000e4f: bcf	 0x27            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1b
    ; INT_IF_BIT_SET $parThis_1b
l_000e50: btfss	 0x27            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1b
          goto	 l_000e53	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_8
          bsf	 0x27            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_8
    ; INT_COPY_BIT_TO_BIT $parThis_13:=$parOut_8
l_000e53: btfsc	 0x27            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x27            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_13
          btfss	 0x25            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_13
          goto	 l_000e5f	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_15_ONE_SHOT_RISING_
          btfss	 0x27            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_15_ONE_SHOT_RISING_
          goto	 l_000e5d	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_13
          bcf	 0x25            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_13
i_000e5c: goto	 l_000e5e	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_15_ONE_SHOT_RISING_
l_000e5d: bsf	 0x27            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_15_ONE_SHOT_RISING_
l_000e5e: goto	 l_000e60	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_15_ONE_SHOT_RISING_
l_000e5f: bcf	 0x27            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_15_ONE_SHOT_RISING_
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ysh:=$parThis_13
l_000e60: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x06            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x06            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_13:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x25            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x25            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_13
          btfss	 0x25            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_13
          goto	 l_000e75	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x11             	  ; (OP_MOVLW, lNow, 0, comment) ; 17
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 17
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000e74	 	  ; (OP_GOTO, ifThen)
i_000e73: goto	 l_000e75	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_13
l_000e74: bcf	 0x25            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_13
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $parThis_13
l_000e75: btfss	 0x25            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_13
          goto	 l_000e7d	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_16_ONE_SHOT_RISING_
          btfss	 0x27            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_16_ONE_SHOT_RISING_
          goto	 l_000e7b	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_13
          bcf	 0x25            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_13
i_000e7a: goto	 l_000e7c	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_16_ONE_SHOT_RISING_
l_000e7b: bsf	 0x27            , 7	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_16_ONE_SHOT_RISING_
l_000e7c: goto	 l_000e7e	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_16_ONE_SHOT_RISING_
l_000e7d: bcf	 0x27            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_16_ONE_SHOT_RISING_
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_1c:=$parThis_13
l_000e7e: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x28            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x28            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1c
          btfss	 0x28            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1c
          goto	 l_000e8c	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000e8b	 	  ; (OP_GOTO, ifThen)
i_000e8a: goto	 l_000e8c	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1c
l_000e8b: bcf	 0x28            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1c
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yst:=$parThis_1c
l_000e8c: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x28            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x06            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x06            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; ELEM_ADD
    ; INT_IF_BIT_SET $parThis_13
          btfss	 0x25            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_13
          goto	 l_000ea1	 	  ; (OP_GOTO, condFalse)
    ; INT_INCREMENT_VARIABLE Cdigit overlap to $overlap overflow to ROverflowFlagV
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          incf	 0x3F            , 1	  ; (OP_INCF, addr, DEST_F, name) ; Cdigit
          btfsc	 0x03            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x28            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x28            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
          btfsc	 0x29            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000ea1	 	  ; (OP_GOTO, notOverflow)
          btfss	 0x3F            , 7	  ; (OP_BTFSS, addr + sov - 1, 7)
          goto	 l_000ea1	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 6	  ; (OP_BSF, addrO, bitO)
    ; INT_COPY_BIT_TO_BIT $parThis_1c:=$parThis_13
l_000ea1: btfsc	 0x25            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x28            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x25            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x28            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1c
          btfss	 0x28            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1c
          goto	 l_000eaf	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x2E            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000eae	 	  ; (OP_GOTO, ifThen)
i_000ead: goto	 l_000eaf	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1c
l_000eae: bcf	 0x28            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1c
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_1c
l_000eaf: btfss	 0x28            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1c
          goto	 l_000eb3	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL Cdigit:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; Cdigit(0x3F):=1(0x1)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; Cdigit(0x3F):=1(0x1)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 18 =======
    ; INT_SET_BIT $rung_top
l_000eb3: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_SUBPROG reset
    ; INT_GOTO Rung21 // reset 0
i_000eb4: goto	 l_000ed6	 	  ; (OP_GOTO, l->FwdAddr)
    ; ] finish series
    ; 
    ; ======= START RUNG 19 =======
    ; INT_SET_BIT $rung_top
l_000eb5: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_SHORT
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000eba	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL jmltekan:=0x0(0)
    ; CopyLitToReg
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; jmltekan(0x43):=0(0x0)
          clrf	 0x44            	  ; (OP_CLRF, addr + i, 0, comment) ; jmltekan(0x43):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000eba: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000ebe	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL digit1:=0x0(0)
    ; CopyLitToReg
          clrf	 0x45            	  ; (OP_CLRF, addr + i, 0, comment) ; digit1(0x45):=0(0x0)
          clrf	 0x46            	  ; (OP_CLRF, addr + i, 0, comment) ; digit1(0x45):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000ebe: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000ec3	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL digit2:=0x63(99)
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; digit2(0x4D):=99(0x63)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; digit2(0x4D):=99(0x63)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; digit2(0x4D):=99(0x63)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000ec3: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000ec8	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL digit3:=0x63(99)
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; digit3(0x4B):=99(0x63)
          movwf	 0x4B            	  ; (OP_MOVWF, addr + i, 0, comment) ; digit3(0x4B):=99(0x63)
          clrf	 0x4C            	  ; (OP_CLRF, addr + i, 0, comment) ; digit3(0x4B):=99(0x63)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000ec8: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000ecd	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL digit4:=0x63(99)
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; digit4(0x49):=99(0x63)
          movwf	 0x49            	  ; (OP_MOVWF, addr + i, 0, comment) ; digit4(0x49):=99(0x63)
          clrf	 0x4A            	  ; (OP_CLRF, addr + i, 0, comment) ; digit4(0x49):=99(0x63)
    ; INT_COPY_BIT_TO_BIT $parThis_1d:=$rung_top
l_000ecd: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x28            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x28            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_RETURN
    ; INT_IF_BIT_SET $parThis_1d
          btfss	 0x28            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1d
          goto	 l_000ed4	 	  ; (OP_GOTO, condFalse)
i_000ed3: return	 	 	  ; (OP_RETURN)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 20 =======
    ; INT_SET_BIT $rung_top
l_000ed4: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_ENDSUB reset
i_000ed5: return	 	 	  ; (OP_RETURN)
    ; ] finish series
    ; 
    ; ======= START RUNG 21 =======
    ; INT_SET_BIT $rung_top
l_000ed6: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_SUBPROG bspace
    ; INT_GOTO Rung24 // bspace 0
i_000ed7: goto	 l_000f19	 	  ; (OP_GOTO, l->FwdAddr)
    ; ] finish series
    ; 
    ; ======= START RUNG 22 =======
    ; INT_SET_BIT $rung_top
l_000ed8: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_SHORT
    ; start parallel [
    ; ELEM_SUB
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000eea	 	  ; (OP_GOTO, condFalse)
    ; INT_DECREMENT_VARIABLE jmltekan overlap to $overlap overflow to ROverflowFlagV
          movf	 0x44            , 0 	  ; (OP_MOVF, addr + sov - 1, DEST_W)
          movwf	 0x29            	  ; (OP_MOVWF, ScratchS)
          movlw	 0x01             	  ; (OP_MOVLW, 1)
          subwf	 0x43            , 1	  ; (OP_SUBWF, addr, DEST_F, name) ; jmltekan
          btfss	 0x03            , 0	  ; (OP_BTFSS, 0x03, 0)
          subwf	 0x44            , 1	  ; (OP_SUBWF, addr + 1, DEST_F, name) ; jmltekan
    ; CopyNotBit
          btfsc	 0x03            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc) ; STATUS_C
          bcf	 0x28            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $overlap
          btfss	 0x03            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc) ; STATUS_C
          bsf	 0x28            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $overlap
          btfss	 0x29            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000eea	 	  ; (OP_GOTO, notOverflow)
          btfsc	 0x44            , 7	  ; (OP_BTFSC, addr + sov - 1, 7)
          goto	 l_000eea	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x28            , 6	  ; (OP_BSF, addrO, bitO)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000eea: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000ef0	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE digit1 := digit2
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x45            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit1
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit2
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit1
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000ef0: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000ef6	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE digit2 := digit3
    ; CopyRegToReg
          movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit3
          movwf	 0x4D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit2
          movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit3
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit2
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000ef6: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000efc	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE digit3 := digit4
    ; CopyRegToReg
          movf	 0x49            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit4
          movwf	 0x4B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit3
          movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; digit4
          movwf	 0x4C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; digit3
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000efc: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000f01	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL digit4:=0x63(99)
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; digit4(0x49):=99(0x63)
          movwf	 0x49            	  ; (OP_MOVWF, addr + i, 0, comment) ; digit4(0x49):=99(0x63)
          clrf	 0x4A            	  ; (OP_CLRF, addr + i, 0, comment) ; digit4(0x49):=99(0x63)
    ; INT_COPY_BIT_TO_BIT $parThis_1e:=$rung_top
l_000f01: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x28            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x28            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $parThis_1e
          btfss	 0x28            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1e
          goto	 l_000f13	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          clrf	 0x2E            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x2F            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          movf	 0x43            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000f12	 	  ; (OP_GOTO, ifThen)
          movf	 0x44            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x2F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000f12	 	  ; (OP_GOTO, ifThen)
i_000f11: goto	 l_000f13	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_1e
l_000f12: bcf	 0x28            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1e
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $parThis_1e
l_000f13: btfss	 0x28            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1e
          goto	 l_000f17	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL digit1:=0x0(0)
    ; CopyLitToReg
          clrf	 0x45            	  ; (OP_CLRF, addr + i, 0, comment) ; digit1(0x45):=0(0x0)
          clrf	 0x46            	  ; (OP_CLRF, addr + i, 0, comment) ; digit1(0x45):=0(0x0)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 23 =======
    ; INT_SET_BIT $rung_top
l_000f17: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_ENDSUB bspace
i_000f18: return	 	 	  ; (OP_RETURN)
l_000f19: bcf	 0x0A            , 3	  ;  PS(0x0F,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000f1a: bcf	 0x0A            , 3	  ;  PS(0x0F,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
i_000f1b: goto	 l_0000dd	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_000f1c: goto	 l_000f1c	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 82
;|  3 | CD1                                               	|   2 byte  | 0x0053       |
;|  4 | Cdigit                                            	|   1 byte  | 0x003F       |
;|  6 | Ckp                                               	|   1 byte  | 0x003B       |
;|  8 | Csr                                               	|   1 byte  | 0x003E       |
;| 13 | Tcountdown                                        	|   2 byte  | 0x005F       |
;| 16 | Tkp                                               	|   1 byte  | 0x0040       |
;| 18 | Tselesai                                          	|   2 byte  | 0x005D       |
;| 20 | Ttekan                                            	|   2 byte  | 0x003C       |
;| 21 | bilangan                                          	|   2 byte  | 0x0051       |
;| 22 | bilangan2                                         	|   2 byte  | 0x004F       |
;| 30 | digit0                                            	|   2 byte  | 0x0047       |
;| 35 | digit1                                            	|   2 byte  | 0x0045       |
;| 36 | digit2                                            	|   2 byte  | 0x004D       |
;| 37 | digit3                                            	|   2 byte  | 0x004B       |
;| 38 | digit4                                            	|   2 byte  | 0x0049       |
;| 43 | digitg4                                           	|   2 byte  | 0x0067       |
;| 44 | dp                                                	|   2 byte  | 0x0069       |
;| 45 | jmltekan                                          	|   2 byte  | 0x0043       |
;| 46 | kp                                                	|   2 byte  | 0x0041       |
;| 52 | puluh                                             	|   2 byte  | 0x0065       |
;| 53 | puluhan                                           	|   2 byte  | 0x0057       |
;| 54 | ratus                                             	|   2 byte  | 0x0061       |
;| 55 | ratusan                                           	|   2 byte  | 0x005B       |
;| 56 | ratussisa                                         	|   2 byte  | 0x0063       |
;| 64 | satuan                                            	|   2 byte  | 0x0059       |
;| 81 | $scratch2                                         	|   2 byte  | 0x0055       |

;|Internal Relays: 71
;|  0 | $once_0_INIT_VARS                                 	|   1 bit   | 0x0020       | 0     |
;|  1 | $rung_top                                         	|   1 bit   | 0x0020       | 1     |
;|  2 | $once_1_ONE_SHOT_RISING_                          	|   1 bit   | 0x0020       | 2     |
;|  3 | $parThis_0                                        	|   1 bit   | 0x0020       | 3     |
;|  4 | $once_2_TCY_Tkp                                   	|   1 bit   | 0x0020       | 4     |
;|  5 | $once_3_CTC_Ckp                                   	|   1 bit   | 0x0020       | 5     |
;|  6 | $parThis_1                                        	|   1 bit   | 0x0020       | 6     |
;|  7 | $parThis_2                                        	|   1 bit   | 0x0020       | 7     |
;|  8 | $parThis_3                                        	|   1 bit   | 0x0021       | 0     |
;|  9 | $parThis_4                                        	|   1 bit   | 0x0021       | 1     |
;| 10 | $parOut_0                                         	|   1 bit   | 0x0021       | 2     |
;| 11 | $parThis_5                                        	|   1 bit   | 0x0021       | 3     |
;| 12 | $parThis_6                                        	|   1 bit   | 0x0021       | 4     |
;| 13 | Rtekan                                            	|   1 bit   | 0x0021       | 5     |
;| 14 | $once_4_ONE_SHOT_RISING_                          	|   1 bit   | 0x0021       | 6     |
;| 15 | Rmulai                                            	|   1 bit   | 0x0021       | 7     |
;| 16 | $once_5_ONE_SHOT_RISING_                          	|   1 bit   | 0x0022       | 0     |
;| 17 | $parThis_7                                        	|   1 bit   | 0x0022       | 1     |
;| 18 | $parThis_8                                        	|   1 bit   | 0x0022       | 2     |
;| 19 | $once_6_SHIFT_REGISTER_digit                      	|   1 bit   | 0x0022       | 3     |
;| 20 | $parThis_9                                        	|   1 bit   | 0x0022       | 4     |
;| 21 | $once_7_ONE_SHOT_RISING_                          	|   1 bit   | 0x0022       | 5     |
;| 22 | $parThis_a                                        	|   1 bit   | 0x0022       | 6     |
;| 23 | $once_8_ONE_SHOT_RISING_                          	|   1 bit   | 0x0022       | 7     |
;| 24 | $parThis_b                                        	|   1 bit   | 0x0023       | 0     |
;| 25 | $parThis_c                                        	|   1 bit   | 0x0023       | 1     |
;| 26 | $parThis_d                                        	|   1 bit   | 0x0023       | 2     |
;| 27 | $once_9_ONE_SHOT_RISING_                          	|   1 bit   | 0x0023       | 3     |
;| 28 | $once_a_ONE_SHOT_RISING_                          	|   1 bit   | 0x0023       | 4     |
;| 29 | $once_b_ONE_SHOT_RISING_                          	|   1 bit   | 0x0023       | 5     |
;| 30 | $once_c_ONE_SHOT_RISING_                          	|   1 bit   | 0x0023       | 6     |
;| 31 | $parThis_e                                        	|   1 bit   | 0x0023       | 7     |
;| 32 | $once_d_ONE_SHOT_RISING_                          	|   1 bit   | 0x0024       | 0     |
;| 33 | $once_e_ONE_SHOT_RISING_                          	|   1 bit   | 0x0024       | 1     |
;| 34 | $parThis_f                                        	|   1 bit   | 0x0024       | 2     |
;| 35 | $once_f_TCY_Tcountdown                            	|   1 bit   | 0x0024       | 3     |
;| 36 | $once_10_ONE_SHOT_RISING_                         	|   1 bit   | 0x0024       | 4     |
;| 37 | $parThis_10                                       	|   1 bit   | 0x0024       | 5     |
;| 38 | $parThis_11                                       	|   1 bit   | 0x0024       | 6     |
;| 39 | $parThis_12                                       	|   1 bit   | 0x0024       | 7     |
;| 40 | $once_11_ONE_SHOT_RISING_                         	|   1 bit   | 0x0025       | 0     |
;| 41 | $once_12_ONE_SHOT_RISING_                         	|   1 bit   | 0x0025       | 1     |
;| 42 | $once_13_ONE_SHOT_RISING_                         	|   1 bit   | 0x0025       | 2     |
;| 43 | Rsr                                               	|   1 bit   | 0x0025       | 3     |
;| 44 | $parThis_13                                       	|   1 bit   | 0x0025       | 4     |
;| 45 | $once_14_CTC_Csr                                  	|   1 bit   | 0x0025       | 5     |
;| 46 | $parOut_1                                         	|   1 bit   | 0x0025       | 6     |
;| 47 | $parThis_14                                       	|   1 bit   | 0x0025       | 7     |
;| 48 | $parOut_2                                         	|   1 bit   | 0x0026       | 0     |
;| 49 | $parThis_15                                       	|   1 bit   | 0x0026       | 1     |
;| 50 | $parOut_3                                         	|   1 bit   | 0x0026       | 2     |
;| 51 | $parThis_16                                       	|   1 bit   | 0x0026       | 3     |
;| 52 | $parOut_4                                         	|   1 bit   | 0x0026       | 4     |
;| 53 | $parThis_17                                       	|   1 bit   | 0x0026       | 5     |
;| 54 | $parOut_5                                         	|   1 bit   | 0x0026       | 6     |
;| 55 | $parThis_18                                       	|   1 bit   | 0x0026       | 7     |
;| 56 | $parOut_6                                         	|   1 bit   | 0x0027       | 0     |
;| 57 | $parThis_19                                       	|   1 bit   | 0x0027       | 1     |
;| 58 | $parOut_7                                         	|   1 bit   | 0x0027       | 2     |
;| 59 | $parThis_1a                                       	|   1 bit   | 0x0027       | 3     |
;| 60 | $parOut_8                                         	|   1 bit   | 0x0027       | 4     |
;| 61 | $parThis_1b                                       	|   1 bit   | 0x0027       | 5     |
;| 62 | $once_15_ONE_SHOT_RISING_                         	|   1 bit   | 0x0027       | 6     |
;| 63 | $once_16_ONE_SHOT_RISING_                         	|   1 bit   | 0x0027       | 7     |
;| 64 | $parThis_1c                                       	|   1 bit   | 0x0028       | 0     |
;| 65 | $parThis_1d                                       	|   1 bit   | 0x0028       | 1     |
;| 66 | $parThis_1e                                       	|   1 bit   | 0x0028       | 2     |
;| 67 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0028       | 3     |
;| 68 | $overflow                                         	|   1 bit   | 0x0028       | 4     |
;| 69 | $overlap                                          	|   1 bit   | 0x0028       | 5     |
;| 70 | ROverflowFlagV                                    	|   1 bit   | 0x0028       | 6     |

